
LoRaSensorCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a54  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003b80  08003b80  00013b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003b88  08003b88  00013b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003b8c  08003b8c  00013b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08003b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001cc  2000000c  08003b9c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001d8  08003b9c  000201d8  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011ded  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026ee  00000000  00000000  00031e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000eb0  00000000  00000000  00034510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d98  00000000  00000000  000353c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00012dc4  00000000  00000000  00036158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000125b8  00000000  00000000  00048f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00075a63  00000000  00000000  0005b4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000d0f37  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000034b0  00000000  00000000  000d0f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003afc 	.word	0x08003afc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003afc 	.word	0x08003afc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80004a8:	b590      	push	{r4, r7, lr}
 80004aa:	b089      	sub	sp, #36	; 0x24
 80004ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	240c      	movs	r4, #12
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	0018      	movs	r0, r3
 80004b4:	2314      	movs	r3, #20
 80004b6:	001a      	movs	r2, r3
 80004b8:	2100      	movs	r1, #0
 80004ba:	f003 fb17 	bl	8003aec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004be:	4b4c      	ldr	r3, [pc, #304]	; (80005f0 <MX_GPIO_Init+0x148>)
 80004c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004c2:	4b4b      	ldr	r3, [pc, #300]	; (80005f0 <MX_GPIO_Init+0x148>)
 80004c4:	2104      	movs	r1, #4
 80004c6:	430a      	orrs	r2, r1
 80004c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ca:	4b49      	ldr	r3, [pc, #292]	; (80005f0 <MX_GPIO_Init+0x148>)
 80004cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ce:	2204      	movs	r2, #4
 80004d0:	4013      	ands	r3, r2
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b46      	ldr	r3, [pc, #280]	; (80005f0 <MX_GPIO_Init+0x148>)
 80004d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004da:	4b45      	ldr	r3, [pc, #276]	; (80005f0 <MX_GPIO_Init+0x148>)
 80004dc:	2101      	movs	r1, #1
 80004de:	430a      	orrs	r2, r1
 80004e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80004e2:	4b43      	ldr	r3, [pc, #268]	; (80005f0 <MX_GPIO_Init+0x148>)
 80004e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e6:	2201      	movs	r2, #1
 80004e8:	4013      	ands	r3, r2
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b40      	ldr	r3, [pc, #256]	; (80005f0 <MX_GPIO_Init+0x148>)
 80004f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004f2:	4b3f      	ldr	r3, [pc, #252]	; (80005f0 <MX_GPIO_Init+0x148>)
 80004f4:	2102      	movs	r1, #2
 80004f6:	430a      	orrs	r2, r1
 80004f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80004fa:	4b3d      	ldr	r3, [pc, #244]	; (80005f0 <MX_GPIO_Init+0x148>)
 80004fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004fe:	2202      	movs	r2, #2
 8000500:	4013      	ands	r3, r2
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|ANT_SW_Pin, GPIO_PIN_RESET);
 8000506:	493b      	ldr	r1, [pc, #236]	; (80005f4 <MX_GPIO_Init+0x14c>)
 8000508:	23a0      	movs	r3, #160	; 0xa0
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	2200      	movs	r2, #0
 800050e:	0018      	movs	r0, r3
 8000510:	f001 fb09 	bl	8001b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIO1_Pin|GPIO_PIN_4|DIO2_Pin, GPIO_PIN_RESET);
 8000514:	4b38      	ldr	r3, [pc, #224]	; (80005f8 <MX_GPIO_Init+0x150>)
 8000516:	2200      	movs	r2, #0
 8000518:	2132      	movs	r1, #50	; 0x32
 800051a:	0018      	movs	r0, r3
 800051c:	f001 fb03 	bl	8001b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	22c0      	movs	r2, #192	; 0xc0
 8000524:	0212      	lsls	r2, r2, #8
 8000526:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000528:	193b      	adds	r3, r7, r4
 800052a:	2203      	movs	r2, #3
 800052c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	193b      	adds	r3, r7, r4
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000534:	193b      	adds	r3, r7, r4
 8000536:	4a31      	ldr	r2, [pc, #196]	; (80005fc <MX_GPIO_Init+0x154>)
 8000538:	0019      	movs	r1, r3
 800053a:	0010      	movs	r0, r2
 800053c:	f001 f958 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|ANT_SW_Pin;
 8000540:	193b      	adds	r3, r7, r4
 8000542:	4a2c      	ldr	r2, [pc, #176]	; (80005f4 <MX_GPIO_Init+0x14c>)
 8000544:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000546:	193b      	adds	r3, r7, r4
 8000548:	2201      	movs	r2, #1
 800054a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	193b      	adds	r3, r7, r4
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	193b      	adds	r3, r7, r4
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	193a      	adds	r2, r7, r4
 800055a:	23a0      	movs	r3, #160	; 0xa0
 800055c:	05db      	lsls	r3, r3, #23
 800055e:	0011      	movs	r1, r2
 8000560:	0018      	movs	r0, r3
 8000562:	f001 f945 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2201      	movs	r2, #1
 800056a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2200      	movs	r2, #0
 8000570:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8000578:	193b      	adds	r3, r7, r4
 800057a:	4a1f      	ldr	r2, [pc, #124]	; (80005f8 <MX_GPIO_Init+0x150>)
 800057c:	0019      	movs	r1, r3
 800057e:	0010      	movs	r0, r2
 8000580:	f001 f936 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 PBPin */
  GPIO_InitStruct.Pin = DIO1_Pin|GPIO_PIN_4|DIO2_Pin;
 8000584:	193b      	adds	r3, r7, r4
 8000586:	2232      	movs	r2, #50	; 0x32
 8000588:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	193b      	adds	r3, r7, r4
 800058c:	2201      	movs	r2, #1
 800058e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	193b      	adds	r3, r7, r4
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	193b      	adds	r3, r7, r4
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059c:	193b      	adds	r3, r7, r4
 800059e:	4a16      	ldr	r2, [pc, #88]	; (80005f8 <MX_GPIO_Init+0x150>)
 80005a0:	0019      	movs	r1, r3
 80005a2:	0010      	movs	r0, r2
 80005a4:	f001 f924 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	2281      	movs	r2, #129	; 0x81
 80005ac:	0212      	lsls	r2, r2, #8
 80005ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2203      	movs	r2, #3
 80005b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	193a      	adds	r2, r7, r4
 80005be:	23a0      	movs	r3, #160	; 0xa0
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	0011      	movs	r1, r2
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 f913 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2208      	movs	r2, #8
 80005ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2203      	movs	r2, #3
 80005d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <MX_GPIO_Init+0x150>)
 80005e0:	0019      	movs	r1, r3
 80005e2:	0010      	movs	r0, r2
 80005e4:	f001 f904 	bl	80017f0 <HAL_GPIO_Init>

}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b009      	add	sp, #36	; 0x24
 80005ee:	bd90      	pop	{r4, r7, pc}
 80005f0:	40021000 	.word	0x40021000
 80005f4:	00000801 	.word	0x00000801
 80005f8:	50000400 	.word	0x50000400
 80005fc:	50000800 	.word	0x50000800

08000600 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_I2C1_Init+0x78>)
 8000606:	4a1d      	ldr	r2, [pc, #116]	; (800067c <MX_I2C1_Init+0x7c>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 800060a:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_I2C1_Init+0x78>)
 800060c:	22e1      	movs	r2, #225	; 0xe1
 800060e:	00d2      	lsls	r2, r2, #3
 8000610:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_I2C1_Init+0x78>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_I2C1_Init+0x78>)
 800061a:	2201      	movs	r2, #1
 800061c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061e:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_I2C1_Init+0x78>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_I2C1_Init+0x78>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_I2C1_Init+0x78>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_I2C1_Init+0x78>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_I2C1_Init+0x78>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_I2C1_Init+0x78>)
 800063e:	0018      	movs	r0, r3
 8000640:	f001 fa8e 	bl	8001b60 <HAL_I2C_Init>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000648:	f000 f9bc 	bl	80009c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_I2C1_Init+0x78>)
 800064e:	2100      	movs	r1, #0
 8000650:	0018      	movs	r0, r3
 8000652:	f001 fb1b 	bl	8001c8c <HAL_I2CEx_ConfigAnalogFilter>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800065a:	f000 f9b3 	bl	80009c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_I2C1_Init+0x78>)
 8000660:	2100      	movs	r1, #0
 8000662:	0018      	movs	r0, r3
 8000664:	f001 fb5e 	bl	8001d24 <HAL_I2CEx_ConfigDigitalFilter>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800066c:	f000 f9aa 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	20000028 	.word	0x20000028
 800067c:	40005400 	.word	0x40005400

08000680 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b089      	sub	sp, #36	; 0x24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	240c      	movs	r4, #12
 800068a:	193b      	adds	r3, r7, r4
 800068c:	0018      	movs	r0, r3
 800068e:	2314      	movs	r3, #20
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f003 fa2a 	bl	8003aec <memset>
  if(i2cHandle->Instance==I2C1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a17      	ldr	r2, [pc, #92]	; (80006fc <HAL_I2C_MspInit+0x7c>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d128      	bne.n	80006f4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <HAL_I2C_MspInit+0x80>)
 80006a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <HAL_I2C_MspInit+0x80>)
 80006a8:	2102      	movs	r1, #2
 80006aa:	430a      	orrs	r2, r1
 80006ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <HAL_I2C_MspInit+0x80>)
 80006b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b2:	2202      	movs	r2, #2
 80006b4:	4013      	ands	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006ba:	0021      	movs	r1, r4
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	22c0      	movs	r2, #192	; 0xc0
 80006c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2212      	movs	r2, #18
 80006c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2203      	movs	r2, #3
 80006d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2201      	movs	r2, #1
 80006d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	4a09      	ldr	r2, [pc, #36]	; (8000704 <HAL_I2C_MspInit+0x84>)
 80006de:	0019      	movs	r1, r3
 80006e0:	0010      	movs	r0, r2
 80006e2:	f001 f885 	bl	80017f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_I2C_MspInit+0x80>)
 80006e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_I2C_MspInit+0x80>)
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	0389      	lsls	r1, r1, #14
 80006f0:	430a      	orrs	r2, r1
 80006f2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	; 0x24
 80006fa:	bd90      	pop	{r4, r7, pc}
 80006fc:	40005400 	.word	0x40005400
 8000700:	40021000 	.word	0x40021000
 8000704:	50000400 	.word	0x50000400

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070a:	b08d      	sub	sp, #52	; 0x34
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	bool RadioBusy=false;
 800070e:	242f      	movs	r4, #47	; 0x2f
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000716:	f000 ff23 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071a:	f000 f8e1 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//TODO: measure power usage, turn on/off gpios (set as inputs?) to decrease current draw
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071e:	f7ff fec3 	bl	80004a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000722:	f7ff ff6d 	bl	8000600 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000726:	f000 f953 	bl	80009d0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800072a:	f000 f9fd 	bl	8000b28 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800072e:	f000 fa2d 	bl	8000b8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // CS pin should default high
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000732:	4b67      	ldr	r3, [pc, #412]	; (80008d0 <main+0x1c8>)
 8000734:	2201      	movs	r2, #1
 8000736:	2140      	movs	r1, #64	; 0x40
 8000738:	0018      	movs	r0, r3
 800073a:	f001 f9f4 	bl	8001b26 <HAL_GPIO_WritePin>

   RadioBusy = true;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2201      	movs	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
   while (RadioBusy)	//wait for modem to turn on
 8000744:	e00b      	b.n	800075e <main+0x56>
   {
	   RadioBusy = HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin);
 8000746:	4b62      	ldr	r3, [pc, #392]	; (80008d0 <main+0x1c8>)
 8000748:	2101      	movs	r1, #1
 800074a:	0018      	movs	r0, r3
 800074c:	f001 f9ce 	bl	8001aec <HAL_GPIO_ReadPin>
 8000750:	0003      	movs	r3, r0
 8000752:	001a      	movs	r2, r3
 8000754:	232f      	movs	r3, #47	; 0x2f
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	1e51      	subs	r1, r2, #1
 800075a:	418a      	sbcs	r2, r1
 800075c:	701a      	strb	r2, [r3, #0]
   while (RadioBusy)	//wait for modem to turn on
 800075e:	232f      	movs	r3, #47	; 0x2f
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1ee      	bne.n	8000746 <main+0x3e>
   }
   uint8_t cfg = STDBY_RC;
 8000768:	212e      	movs	r1, #46	; 0x2e
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
   uint8_t packet_type = SX126X_PKT_TYPE_LORA;
 8000770:	232d      	movs	r3, #45	; 0x2d
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
   uint32_t freqInHertz = 918000000; //918Mhz
 8000778:	4b56      	ldr	r3, [pc, #344]	; (80008d4 <main+0x1cc>)
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
   sx126x_pa_cfg_params_t PA_Config;
   PA_Config.pa_duty_cycle = 0x02;
 800077c:	2518      	movs	r5, #24
 800077e:	197b      	adds	r3, r7, r5
 8000780:	2202      	movs	r2, #2
 8000782:	701a      	strb	r2, [r3, #0]
   PA_Config.hp_max = 0x02;
 8000784:	197b      	adds	r3, r7, r5
 8000786:	2202      	movs	r2, #2
 8000788:	705a      	strb	r2, [r3, #1]
   PA_Config.device_sel = 0x00;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	2200      	movs	r2, #0
 800078e:	709a      	strb	r2, [r3, #2]
   PA_Config.pa_lut = 0x01;
 8000790:	197b      	adds	r3, r7, r5
 8000792:	2201      	movs	r2, #1
 8000794:	70da      	strb	r2, [r3, #3]
   sx126x_mod_params_lora_t LoraParams;
   LoraParams.bw = SX126X_LORA_BW_125;
 8000796:	2614      	movs	r6, #20
 8000798:	19bb      	adds	r3, r7, r6
 800079a:	2204      	movs	r2, #4
 800079c:	705a      	strb	r2, [r3, #1]
   LoraParams.sf = SX126X_LORA_SF7;
 800079e:	19bb      	adds	r3, r7, r6
 80007a0:	2207      	movs	r2, #7
 80007a2:	701a      	strb	r2, [r3, #0]
   LoraParams.cr = SX126X_LORA_CR_4_5;
 80007a4:	19bb      	adds	r3, r7, r6
 80007a6:	2201      	movs	r2, #1
 80007a8:	709a      	strb	r2, [r3, #2]
   LoraParams.ldro = false;
 80007aa:	19bb      	adds	r3, r7, r6
 80007ac:	2200      	movs	r2, #0
 80007ae:	70da      	strb	r2, [r3, #3]

   sx126x_pkt_params_lora_t PacketParams;
   PacketParams.crc_is_on = true;
 80007b0:	240c      	movs	r4, #12
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	2201      	movs	r2, #1
 80007b6:	711a      	strb	r2, [r3, #4]
   PacketParams.header_type = SX126X_LORA_PKT_IMPLICIT;
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	2201      	movs	r2, #1
 80007bc:	709a      	strb	r2, [r3, #2]
   PacketParams.preamble_len_in_symb = 8;
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	2208      	movs	r2, #8
 80007c2:	801a      	strh	r2, [r3, #0]
   PacketParams.invert_iq_is_on = true;
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	2201      	movs	r2, #1
 80007c8:	715a      	strb	r2, [r3, #5]
   PacketParams.pld_len_in_bytes = MAX_PACKET_LENGTH;
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	2204      	movs	r2, #4
 80007ce:	70da      	strb	r2, [r3, #3]
   uint8_t timeout_ms = 100;
 80007d0:	2227      	movs	r2, #39	; 0x27
 80007d2:	18bb      	adds	r3, r7, r2
 80007d4:	2264      	movs	r2, #100	; 0x64
 80007d6:	701a      	strb	r2, [r3, #0]

   //Delay duration = Delay(23:0) *15.625 μs
   uint32_t tcxo_delay = TCXO_BOOT_TIME_MS / 15625; //magic number comes from 13.3.5 "SetDIO2AsRfSwitchCtrl", page 84 of DS_SX1261-2_v2.1.pdf
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
   sx126x_tcxo_ctrl_voltages_t tcxo_voltage = SX126X_TCXO_CTRL_2_7V;
 80007dc:	201f      	movs	r0, #31
 80007de:	183b      	adds	r3, r7, r0
 80007e0:	2205      	movs	r2, #5
 80007e2:	701a      	strb	r2, [r3, #0]

   uint8_t TxPower = 0; //In dbM
 80007e4:	231e      	movs	r3, #30
 80007e6:	18fb      	adds	r3, r7, r3
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
   uint8_t buffer[8] = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]
   buffer[0] = 's';
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2273      	movs	r2, #115	; 0x73
 80007fa:	701a      	strb	r2, [r3, #0]
   buffer[1] = 'h';
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2268      	movs	r2, #104	; 0x68
 8000800:	705a      	strb	r2, [r3, #1]
   buffer[2] = 'i';
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2269      	movs	r2, #105	; 0x69
 8000806:	709a      	strb	r2, [r3, #2]
   buffer[3] = 't';
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2274      	movs	r2, #116	; 0x74
 800080c:	70da      	strb	r2, [r3, #3]

   sx126x_set_standby(&hspi1,cfg);
 800080e:	187b      	adds	r3, r7, r1
 8000810:	781a      	ldrb	r2, [r3, #0]
 8000812:	4b31      	ldr	r3, [pc, #196]	; (80008d8 <main+0x1d0>)
 8000814:	0011      	movs	r1, r2
 8000816:	0018      	movs	r0, r3
 8000818:	f000 fa60 	bl	8000cdc <sx126x_set_standby>
   sx126x_set_pkt_type(&hspi1, packet_type);
 800081c:	232d      	movs	r3, #45	; 0x2d
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	781a      	ldrb	r2, [r3, #0]
 8000822:	4b2d      	ldr	r3, [pc, #180]	; (80008d8 <main+0x1d0>)
 8000824:	0011      	movs	r1, r2
 8000826:	0018      	movs	r0, r3
 8000828:	f000 fbed 	bl	8001006 <sx126x_set_pkt_type>
   sx126x_set_rf_freq(&hspi1, freqInHertz);
 800082c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800082e:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <main+0x1d0>)
 8000830:	0011      	movs	r1, r2
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fba8 	bl	8000f88 <sx126x_set_rf_freq>
   sx126x_set_pa_cfg(&hspi1, &PA_Config);
 8000838:	197a      	adds	r2, r7, r5
 800083a:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <main+0x1d0>)
 800083c:	0011      	movs	r1, r2
 800083e:	0018      	movs	r0, r3
 8000840:	f000 faa9 	bl	8000d96 <sx126x_set_pa_cfg>
   sx126x_set_dio2_as_rf_sw_ctrl(&hspi1, false); //although we use DIO2 as an rf switch, also need to use 
 8000844:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <main+0x1d0>)
 8000846:	2100      	movs	r1, #0
 8000848:	0018      	movs	r0, r3
 800084a:	f000 fb54 	bl	8000ef6 <sx126x_set_dio2_as_rf_sw_ctrl>
   sx126x_set_dio3_as_tcxo_ctrl(&hspi1, tcxo_voltage, tcxo_delay);
 800084e:	6a3a      	ldr	r2, [r7, #32]
 8000850:	201f      	movs	r0, #31
 8000852:	183b      	adds	r3, r7, r0
 8000854:	7819      	ldrb	r1, [r3, #0]
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <main+0x1d0>)
 8000858:	0018      	movs	r0, r3
 800085a:	f000 fb69 	bl	8000f30 <sx126x_set_dio3_as_tcxo_ctrl>

   sx126x_set_tx_params(&hspi1, TxPower, SX126X_RAMP_10_US);
 800085e:	231e      	movs	r3, #30
 8000860:	18fb      	adds	r3, r7, r3
 8000862:	2100      	movs	r1, #0
 8000864:	5659      	ldrsb	r1, [r3, r1]
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <main+0x1d0>)
 8000868:	2200      	movs	r2, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f000 fbe7 	bl	800103e <sx126x_set_tx_params>
   sx126x_set_buffer_base_address(&hspi1, 0, 128); //give each 128 length in a shared buffer; may be nicer to allow for the full 8byte buffer to be shared between the two?
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <main+0x1d0>)
 8000872:	2280      	movs	r2, #128	; 0x80
 8000874:	2100      	movs	r1, #0
 8000876:	0018      	movs	r0, r3
 8000878:	f000 fcc6 	bl	8001208 <sx126x_set_buffer_base_address>
   sx126x_write_buffer(&hspi1, 0, buffer, MAX_PACKET_LENGTH);
 800087c:	1d3a      	adds	r2, r7, #4
 800087e:	4816      	ldr	r0, [pc, #88]	; (80008d8 <main+0x1d0>)
 8000880:	2304      	movs	r3, #4
 8000882:	2100      	movs	r1, #0
 8000884:	f000 fb10 	bl	8000ea8 <sx126x_write_buffer>
   sx126x_set_lora_mod_params(&hspi1, &LoraParams);
 8000888:	19ba      	adds	r2, r7, r6
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <main+0x1d0>)
 800088c:	0011      	movs	r1, r2
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fbfa 	bl	8001088 <sx126x_set_lora_mod_params>
   sx126x_set_lora_pkt_params(&hspi1, &PacketParams);
 8000894:	193a      	adds	r2, r7, r4
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <main+0x1d0>)
 8000898:	0011      	movs	r1, r2
 800089a:	0018      	movs	r0, r3
 800089c:	f000 fc36 	bl	800110c <sx126x_set_lora_pkt_params>
   //sx126x_set_dio_irq_params(&hspi1, ); //unclear on what the right way to go is here
   sx126x_set_lora_sync_word(&hspi1, (uint8_t)0x1424); //value from google, nothing special
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <main+0x1d0>)
 80008a2:	2124      	movs	r1, #36	; 0x24
 80008a4:	0018      	movs	r0, r3
 80008a6:	f000 fd0b 	bl	80012c0 <sx126x_set_lora_sync_word>
   ReadyForTx(true);
 80008aa:	2001      	movs	r0, #1
 80008ac:	f000 fdf2 	bl	8001494 <ReadyForTx>
   sx126x_set_tx(&hspi1, timeout_ms);
 80008b0:	2227      	movs	r2, #39	; 0x27
 80008b2:	18bb      	adds	r3, r7, r2
 80008b4:	781a      	ldrb	r2, [r3, #0]
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <main+0x1d0>)
 80008b8:	0011      	movs	r1, r2
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 fa2a 	bl	8000d14 <sx126x_set_tx>
   ReadyForTx(false);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 fde7 	bl	8001494 <ReadyForTx>
   //pause 5 seconds
   HAL_Delay(5000);
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <main+0x1d4>)
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 feb9 	bl	8001640 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //TODO some form of state machine?

  while (1)
 80008ce:	e7fe      	b.n	80008ce <main+0x1c6>
 80008d0:	50000400 	.word	0x50000400
 80008d4:	36b79180 	.word	0x36b79180
 80008d8:	20000074 	.word	0x20000074
 80008dc:	00001388 	.word	0x00001388

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b09b      	sub	sp, #108	; 0x6c
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	2434      	movs	r4, #52	; 0x34
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	0018      	movs	r0, r3
 80008ec:	2334      	movs	r3, #52	; 0x34
 80008ee:	001a      	movs	r2, r3
 80008f0:	2100      	movs	r1, #0
 80008f2:	f003 f8fb 	bl	8003aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f6:	2320      	movs	r3, #32
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	0018      	movs	r0, r3
 80008fc:	2314      	movs	r3, #20
 80008fe:	001a      	movs	r2, r3
 8000900:	2100      	movs	r1, #0
 8000902:	f003 f8f3 	bl	8003aec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000906:	003b      	movs	r3, r7
 8000908:	0018      	movs	r0, r3
 800090a:	2320      	movs	r3, #32
 800090c:	001a      	movs	r2, r3
 800090e:	2100      	movs	r1, #0
 8000910:	f003 f8ec 	bl	8003aec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000914:	4b29      	ldr	r3, [pc, #164]	; (80009bc <SystemClock_Config+0xdc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a29      	ldr	r2, [pc, #164]	; (80009c0 <SystemClock_Config+0xe0>)
 800091a:	401a      	ands	r2, r3
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <SystemClock_Config+0xdc>)
 800091e:	2180      	movs	r1, #128	; 0x80
 8000920:	0109      	lsls	r1, r1, #4
 8000922:	430a      	orrs	r2, r1
 8000924:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000926:	0021      	movs	r1, r4
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2210      	movs	r2, #16
 800092c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2201      	movs	r2, #1
 8000932:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	22a0      	movs	r2, #160	; 0xa0
 800093e:	0212      	lsls	r2, r2, #8
 8000940:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2200      	movs	r2, #0
 8000946:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000948:	187b      	adds	r3, r7, r1
 800094a:	0018      	movs	r0, r3
 800094c:	f001 fa36 	bl	8001dbc <HAL_RCC_OscConfig>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000954:	f000 f836 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	2120      	movs	r1, #32
 800095a:	187b      	adds	r3, r7, r1
 800095c:	220f      	movs	r2, #15
 800095e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2100      	movs	r1, #0
 800097c:	0018      	movs	r0, r3
 800097e:	f001 fd99 	bl	80024b4 <HAL_RCC_ClockConfig>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000986:	f000 f81d 	bl	80009c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800098a:	003b      	movs	r3, r7
 800098c:	220b      	movs	r2, #11
 800098e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000990:	003b      	movs	r3, r7
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000996:	003b      	movs	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800099c:	003b      	movs	r3, r7
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a2:	003b      	movs	r3, r7
 80009a4:	0018      	movs	r0, r3
 80009a6:	f001 ffa9 	bl	80028fc <HAL_RCCEx_PeriphCLKConfig>
 80009aa:	1e03      	subs	r3, r0, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80009ae:	f000 f809 	bl	80009c4 <Error_Handler>
  }
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b01b      	add	sp, #108	; 0x6c
 80009b8:	bd90      	pop	{r4, r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	40007000 	.word	0x40007000
 80009c0:	ffffe7ff 	.word	0xffffe7ff

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_SPI1_Init+0x68>)
 80009d6:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <MX_SPI1_Init+0x6c>)
 80009d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_SPI1_Init+0x68>)
 80009dc:	2282      	movs	r2, #130	; 0x82
 80009de:	0052      	lsls	r2, r2, #1
 80009e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_SPI1_Init+0x68>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_SPI1_Init+0x68>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_SPI1_Init+0x68>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f4:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_SPI1_Init+0x68>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_SPI1_Init+0x68>)
 80009fc:	2280      	movs	r2, #128	; 0x80
 80009fe:	02d2      	lsls	r2, r2, #11
 8000a00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <MX_SPI1_Init+0x68>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_SPI1_Init+0x68>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <MX_SPI1_Init+0x68>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_SPI1_Init+0x68>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <MX_SPI1_Init+0x68>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <MX_SPI1_Init+0x68>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f002 f8b0 	bl	8002b88 <HAL_SPI_Init>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a2c:	f7ff ffca 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	20000074 	.word	0x20000074
 8000a3c:	40013000 	.word	0x40013000

08000a40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b089      	sub	sp, #36	; 0x24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	240c      	movs	r4, #12
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	2314      	movs	r3, #20
 8000a50:	001a      	movs	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	f003 f84a 	bl	8003aec <memset>
  if(spiHandle->Instance==SPI1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <HAL_SPI_MspInit+0x80>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d129      	bne.n	8000ab6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <HAL_SPI_MspInit+0x84>)
 8000a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <HAL_SPI_MspInit+0x84>)
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	0149      	lsls	r1, r1, #5
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <HAL_SPI_MspInit+0x84>)
 8000a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <HAL_SPI_MspInit+0x84>)
 8000a76:	2101      	movs	r1, #1
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_SPI_MspInit+0x84>)
 8000a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a80:	2201      	movs	r2, #1
 8000a82:	4013      	ands	r3, r2
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a88:	0021      	movs	r1, r4
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	22f0      	movs	r2, #240	; 0xf0
 8000a8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2202      	movs	r2, #2
 8000a94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	187a      	adds	r2, r7, r1
 8000aaa:	23a0      	movs	r3, #160	; 0xa0
 8000aac:	05db      	lsls	r3, r3, #23
 8000aae:	0011      	movs	r1, r2
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f000 fe9d 	bl	80017f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b009      	add	sp, #36	; 0x24
 8000abc:	bd90      	pop	{r4, r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	40013000 	.word	0x40013000
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <HAL_MspInit+0x24>)
 8000ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_MspInit+0x24>)
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <HAL_MspInit+0x24>)
 8000ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <HAL_MspInit+0x24>)
 8000ade:	2180      	movs	r1, #128	; 0x80
 8000ae0:	0549      	lsls	r1, r1, #21
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40021000 	.word	0x40021000

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <NMI_Handler+0x4>

08000af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <HardFault_Handler+0x4>

08000afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 fd78 	bl	8001608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <MX_USART1_UART_Init+0x5c>)
 8000b2e:	4a16      	ldr	r2, [pc, #88]	; (8000b88 <MX_USART1_UART_Init+0x60>)
 8000b30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_USART1_UART_Init+0x5c>)
 8000b34:	22e1      	movs	r2, #225	; 0xe1
 8000b36:	0252      	lsls	r2, r2, #9
 8000b38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_USART1_UART_Init+0x5c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_USART1_UART_Init+0x5c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_USART1_UART_Init+0x5c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <MX_USART1_UART_Init+0x5c>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_USART1_UART_Init+0x5c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <MX_USART1_UART_Init+0x5c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_USART1_UART_Init+0x5c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <MX_USART1_UART_Init+0x5c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000b6a:	4806      	ldr	r0, [pc, #24]	; (8000b84 <MX_USART1_UART_Init+0x5c>)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	f002 ff27 	bl	80039c4 <HAL_RS485Ex_Init>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000b7a:	f7ff ff23 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000cc 	.word	0x200000cc
 8000b88:	40013800 	.word	0x40013800

08000b8c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_USART2_UART_Init+0x5c>)
 8000b92:	4a16      	ldr	r2, [pc, #88]	; (8000bec <MX_USART2_UART_Init+0x60>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_USART2_UART_Init+0x5c>)
 8000b98:	22e1      	movs	r2, #225	; 0xe1
 8000b9a:	0252      	lsls	r2, r2, #9
 8000b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_USART2_UART_Init+0x5c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_USART2_UART_Init+0x5c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_USART2_UART_Init+0x5c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <MX_USART2_UART_Init+0x5c>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USART2_UART_Init+0x5c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_USART2_UART_Init+0x5c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USART2_UART_Init+0x5c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_USART2_UART_Init+0x5c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000bce:	4806      	ldr	r0, [pc, #24]	; (8000be8 <MX_USART2_UART_Init+0x5c>)
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	f002 fef5 	bl	80039c4 <HAL_RS485Ex_Init>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000bde:	f7ff fef1 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000150 	.word	0x20000150
 8000bec:	40004400 	.word	0x40004400

08000bf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b08b      	sub	sp, #44	; 0x2c
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	2414      	movs	r4, #20
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	2314      	movs	r3, #20
 8000c00:	001a      	movs	r2, r3
 8000c02:	2100      	movs	r1, #0
 8000c04:	f002 ff72 	bl	8003aec <memset>
  if(uartHandle->Instance==USART1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a30      	ldr	r2, [pc, #192]	; (8000cd0 <HAL_UART_MspInit+0xe0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d12b      	bne.n	8000c6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c12:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <HAL_UART_MspInit+0xe4>)
 8000c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c16:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <HAL_UART_MspInit+0xe4>)
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	01c9      	lsls	r1, r1, #7
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <HAL_UART_MspInit+0xe4>)
 8000c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c24:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <HAL_UART_MspInit+0xe4>)
 8000c26:	2101      	movs	r1, #1
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <HAL_UART_MspInit+0xe4>)
 8000c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c30:	2201      	movs	r2, #1
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	22b0      	movs	r2, #176	; 0xb0
 8000c3c:	0152      	lsls	r2, r2, #5
 8000c3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	0021      	movs	r1, r4
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2202      	movs	r2, #2
 8000c46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2203      	movs	r2, #3
 8000c52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2204      	movs	r2, #4
 8000c58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	187a      	adds	r2, r7, r1
 8000c5c:	23a0      	movs	r3, #160	; 0xa0
 8000c5e:	05db      	lsls	r3, r3, #23
 8000c60:	0011      	movs	r1, r2
 8000c62:	0018      	movs	r0, r3
 8000c64:	f000 fdc4 	bl	80017f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c68:	e02e      	b.n	8000cc8 <HAL_UART_MspInit+0xd8>
  else if(uartHandle->Instance==USART2)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a1a      	ldr	r2, [pc, #104]	; (8000cd8 <HAL_UART_MspInit+0xe8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d129      	bne.n	8000cc8 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <HAL_UART_MspInit+0xe4>)
 8000c76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <HAL_UART_MspInit+0xe4>)
 8000c7a:	2180      	movs	r1, #128	; 0x80
 8000c7c:	0289      	lsls	r1, r1, #10
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <HAL_UART_MspInit+0xe4>)
 8000c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <HAL_UART_MspInit+0xe4>)
 8000c88:	2101      	movs	r1, #1
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <HAL_UART_MspInit+0xe4>)
 8000c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c92:	2201      	movs	r2, #1
 8000c94:	4013      	ands	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c9a:	2114      	movs	r1, #20
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	220e      	movs	r2, #14
 8000ca0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	187a      	adds	r2, r7, r1
 8000cbc:	23a0      	movs	r3, #160	; 0xa0
 8000cbe:	05db      	lsls	r3, r3, #23
 8000cc0:	0011      	movs	r1, r2
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f000 fd94 	bl	80017f0 <HAL_GPIO_Init>
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b00b      	add	sp, #44	; 0x2c
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	40013800 	.word	0x40013800
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40004400 	.word	0x40004400

08000cdc <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af02      	add	r7, sp, #8
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	000a      	movs	r2, r1
 8000ce6:	1cfb      	adds	r3, r7, #3
 8000ce8:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_STANDBY] = {
 8000cea:	210c      	movs	r1, #12
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	2280      	movs	r2, #128	; 0x80
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	1cfa      	adds	r2, r7, #3
 8000cf6:	7812      	ldrb	r2, [r2, #0]
 8000cf8:	705a      	strb	r2, [r3, #1]
        SX126X_SET_STANDBY,
        ( uint8_t ) cfg,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 8000cfa:	1879      	adds	r1, r7, r1
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	2300      	movs	r3, #0
 8000d04:	2202      	movs	r2, #2
 8000d06:	f000 fb7f 	bl	8001408 <sx126x_hal_write>
 8000d0a:	0003      	movs	r3, r0
}
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b004      	add	sp, #16
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms )
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	02db      	lsls	r3, r3, #11
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d301      	bcc.n	8000d2c <sx126x_set_tx+0x18>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	e00c      	b.n	8000d46 <sx126x_set_tx+0x32>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 fabc 	bl	80012ac <sx126x_convert_timeout_in_ms_to_rtc_step>
 8000d34:	0003      	movs	r3, r0
 8000d36:	60fb      	str	r3, [r7, #12]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	0011      	movs	r1, r2
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 f805 	bl	8000d4e <sx126x_set_tx_with_timeout_in_rtc_step>
 8000d44:	0003      	movs	r3, r0
}
 8000d46:	0018      	movs	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b004      	add	sp, #16
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af02      	add	r7, sp, #8
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 8000d58:	210c      	movs	r1, #12
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2283      	movs	r2, #131	; 0x83
 8000d5e:	701a      	strb	r2, [r3, #0]
        SX126X_SET_TX,
        ( uint8_t )( timeout_in_rtc_step >> 16 ),
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	0c1b      	lsrs	r3, r3, #16
 8000d64:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( timeout_in_rtc_step >> 8 ),
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( timeout_in_rtc_step >> 0 ),
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	70da      	strb	r2, [r3, #3]
    };
    
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	2300      	movs	r3, #0
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2300      	movs	r3, #0
 8000d86:	2204      	movs	r2, #4
 8000d88:	f000 fb3e 	bl	8001408 <sx126x_hal_write>
 8000d8c:	0003      	movs	r3, r0
}
 8000d8e:	0018      	movs	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b004      	add	sp, #16
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <sx126x_set_pa_cfg>:

    return sx126x_cal_img( context, freq1, freq2 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af02      	add	r7, sp, #8
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 8000da0:	2108      	movs	r1, #8
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2295      	movs	r2, #149	; 0x95
 8000da6:	701a      	strb	r2, [r3, #0]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	781a      	ldrb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	705a      	strb	r2, [r3, #1]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	785a      	ldrb	r2, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	709a      	strb	r2, [r3, #2]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	789a      	ldrb	r2, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	70da      	strb	r2, [r3, #3]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	78da      	ldrb	r2, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	711a      	strb	r2, [r3, #4]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 8000dc8:	1879      	adds	r1, r7, r1
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	2205      	movs	r2, #5
 8000dd4:	f000 fb18 	bl	8001408 <sx126x_hal_write>
 8000dd8:	0003      	movs	r3, r0
}
 8000dda:	0018      	movs	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b004      	add	sp, #16
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 8000de2:	b5b0      	push	{r4, r5, r7, lr}
 8000de4:	b088      	sub	sp, #32
 8000de6:	af02      	add	r7, sp, #8
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	0008      	movs	r0, r1
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	0019      	movs	r1, r3
 8000df0:	240a      	movs	r4, #10
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	1c02      	adds	r2, r0, #0
 8000df6:	801a      	strh	r2, [r3, #0]
 8000df8:	2509      	movs	r5, #9
 8000dfa:	197b      	adds	r3, r7, r5
 8000dfc:	1c0a      	adds	r2, r1, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 8000e00:	2114      	movs	r1, #20
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	220d      	movs	r2, #13
 8000e06:	701a      	strb	r2, [r3, #0]
        SX126X_WRITE_REGISTER,
        ( uint8_t )( address >> 8 ),
 8000e08:	0020      	movs	r0, r4
 8000e0a:	183b      	adds	r3, r7, r0
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	0a1b      	lsrs	r3, r3, #8
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( address >> 0 ),
 8000e18:	183b      	adds	r3, r7, r0
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	709a      	strb	r2, [r3, #2]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 8000e22:	197b      	adds	r3, r7, r5
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	1879      	adds	r1, r7, r1
 8000e2c:	68f8      	ldr	r0, [r7, #12]
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	0013      	movs	r3, r2
 8000e32:	2203      	movs	r2, #3
 8000e34:	f000 fae8 	bl	8001408 <sx126x_hal_write>
 8000e38:	0003      	movs	r3, r0
}
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b006      	add	sp, #24
 8000e40:	bdb0      	pop	{r4, r5, r7, pc}

08000e42 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 8000e42:	b5b0      	push	{r4, r5, r7, lr}
 8000e44:	b088      	sub	sp, #32
 8000e46:	af02      	add	r7, sp, #8
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	0008      	movs	r0, r1
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	0019      	movs	r1, r3
 8000e50:	240a      	movs	r4, #10
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	1c02      	adds	r2, r0, #0
 8000e56:	801a      	strh	r2, [r3, #0]
 8000e58:	2509      	movs	r5, #9
 8000e5a:	197b      	adds	r3, r7, r5
 8000e5c:	1c0a      	adds	r2, r1, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 8000e60:	2114      	movs	r1, #20
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	221d      	movs	r2, #29
 8000e66:	701a      	strb	r2, [r3, #0]
        SX126X_READ_REGISTER,
        ( uint8_t )( address >> 8 ),
 8000e68:	0020      	movs	r0, r4
 8000e6a:	183b      	adds	r3, r7, r0
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	0a1b      	lsrs	r3, r3, #8
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( address >> 0 ),
 8000e78:	183b      	adds	r3, r7, r0
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	709a      	strb	r2, [r3, #2]
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2200      	movs	r2, #0
 8000e86:	70da      	strb	r2, [r3, #3]
        SX126X_NOP,
    };

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 8000e88:	197b      	adds	r3, r7, r5
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	1879      	adds	r1, r7, r1
 8000e92:	68f8      	ldr	r0, [r7, #12]
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	0013      	movs	r3, r2
 8000e98:	2204      	movs	r2, #4
 8000e9a:	f000 faee 	bl	800147a <sx126x_hal_read>
 8000e9e:	0003      	movs	r3, r0
}
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b006      	add	sp, #24
 8000ea6:	bdb0      	pop	{r4, r5, r7, pc}

08000ea8 <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	0008      	movs	r0, r1
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	0019      	movs	r1, r3
 8000eb6:	240b      	movs	r4, #11
 8000eb8:	193b      	adds	r3, r7, r4
 8000eba:	1c02      	adds	r2, r0, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
 8000ebe:	200a      	movs	r0, #10
 8000ec0:	183b      	adds	r3, r7, r0
 8000ec2:	1c0a      	adds	r2, r1, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = {
 8000ec6:	2114      	movs	r1, #20
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	220e      	movs	r2, #14
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	193a      	adds	r2, r7, r4
 8000ed2:	7812      	ldrb	r2, [r2, #0]
 8000ed4:	705a      	strb	r2, [r3, #1]
        SX126X_WRITE_BUFFER,
        offset,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 8000ed6:	183b      	adds	r3, r7, r0
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	1879      	adds	r1, r7, r1
 8000ee0:	68f8      	ldr	r0, [r7, #12]
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	f000 fa8e 	bl	8001408 <sx126x_hal_write>
 8000eec:	0003      	movs	r3, r0
}
 8000eee:	0018      	movs	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b007      	add	sp, #28
 8000ef4:	bd90      	pop	{r4, r7, pc}

08000ef6 <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af02      	add	r7, sp, #8
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	000a      	movs	r2, r1
 8000f00:	1cfb      	adds	r3, r7, #3
 8000f02:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = {
 8000f04:	210c      	movs	r1, #12
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	229d      	movs	r2, #157	; 0x9d
 8000f0a:	701a      	strb	r2, [r3, #0]
        SX126X_SET_DIO2_AS_RF_SWITCH_CTRL,
        ( enable == true ) ? 1 : 0,
 8000f0c:	1cfb      	adds	r3, r7, #3
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	001a      	movs	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = {
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	705a      	strb	r2, [r3, #1]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 8000f16:	1879      	adds	r1, r7, r1
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	2202      	movs	r2, #2
 8000f22:	f000 fa71 	bl	8001408 <sx126x_hal_write>
 8000f26:	0003      	movs	r3, r0
}
 8000f28:	0018      	movs	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b004      	add	sp, #16
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	200b      	movs	r0, #11
 8000f3c:	183b      	adds	r3, r7, r0
 8000f3e:	1c0a      	adds	r2, r1, #0
 8000f40:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 8000f42:	2110      	movs	r1, #16
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	2297      	movs	r2, #151	; 0x97
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	183a      	adds	r2, r7, r0
 8000f4e:	7812      	ldrb	r2, [r2, #0]
 8000f50:	705a      	strb	r2, [r3, #1]
        SX126X_SET_DIO3_AS_TCXO_CTRL, ( uint8_t ) tcxo_voltage,    ( uint8_t )( timeout >> 16 ),
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	0c1b      	lsrs	r3, r3, #16
 8000f56:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	0a1b      	lsrs	r3, r3, #8
 8000f60:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	70da      	strb	r2, [r3, #3]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	711a      	strb	r2, [r3, #4]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 8000f6e:	1879      	adds	r1, r7, r1
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	2300      	movs	r3, #0
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2300      	movs	r3, #0
 8000f78:	2205      	movs	r2, #5
 8000f7a:	f000 fa45 	bl	8001408 <sx126x_hal_write>
 8000f7e:	0003      	movs	r3, r0
}
 8000f80:	0018      	movs	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b006      	add	sp, #24
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	0018      	movs	r0, r3
 8000f96:	f000 f95d 	bl	8001254 <sx126x_convert_freq_in_hz_to_pll_step>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	60fb      	str	r3, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f000 f805 	bl	8000fb4 <sx126x_set_rf_freq_in_pll_steps>
 8000faa:	0003      	movs	r3, r0
}
 8000fac:	0018      	movs	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b004      	add	sp, #16
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8000fbe:	2108      	movs	r1, #8
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2286      	movs	r2, #134	; 0x86
 8000fc4:	701a      	strb	r2, [r3, #0]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	0e1b      	lsrs	r3, r3, #24
 8000fca:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	705a      	strb	r2, [r3, #1]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	0c1b      	lsrs	r3, r3, #16
 8000fd4:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	70da      	strb	r2, [r3, #3]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	711a      	strb	r2, [r3, #4]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 8000fec:	1879      	adds	r1, r7, r1
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	2205      	movs	r2, #5
 8000ff8:	f000 fa06 	bl	8001408 <sx126x_hal_write>
 8000ffc:	0003      	movs	r3, r0
}
 8000ffe:	0018      	movs	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	b004      	add	sp, #16
 8001004:	bd80      	pop	{r7, pc}

08001006 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af02      	add	r7, sp, #8
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	000a      	movs	r2, r1
 8001010:	1cfb      	adds	r3, r7, #3
 8001012:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = {
 8001014:	210c      	movs	r1, #12
 8001016:	187b      	adds	r3, r7, r1
 8001018:	228a      	movs	r2, #138	; 0x8a
 800101a:	701a      	strb	r2, [r3, #0]
 800101c:	187b      	adds	r3, r7, r1
 800101e:	1cfa      	adds	r2, r7, #3
 8001020:	7812      	ldrb	r2, [r2, #0]
 8001022:	705a      	strb	r2, [r3, #1]
        SX126X_SET_PKT_TYPE,
        ( uint8_t ) pkt_type,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 8001024:	1879      	adds	r1, r7, r1
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	2300      	movs	r3, #0
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2300      	movs	r3, #0
 800102e:	2202      	movs	r2, #2
 8001030:	f000 f9ea 	bl	8001408 <sx126x_hal_write>
 8001034:	0003      	movs	r3, r0
}
 8001036:	0018      	movs	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bd80      	pop	{r7, pc}

0800103e <sx126x_set_tx_params>:

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_PKT_TYPE, ( uint8_t* ) pkt_type, 1 );
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af02      	add	r7, sp, #8
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	0008      	movs	r0, r1
 8001048:	0011      	movs	r1, r2
 800104a:	1cfb      	adds	r3, r7, #3
 800104c:	1c02      	adds	r2, r0, #0
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	1cbb      	adds	r3, r7, #2
 8001052:	1c0a      	adds	r2, r1, #0
 8001054:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 8001056:	210c      	movs	r1, #12
 8001058:	187b      	adds	r3, r7, r1
 800105a:	228e      	movs	r2, #142	; 0x8e
 800105c:	701a      	strb	r2, [r3, #0]
        SX126X_SET_TX_PARAMS,
        ( uint8_t ) pwr_in_dbm,
 800105e:	1cfb      	adds	r3, r7, #3
 8001060:	781a      	ldrb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 8001062:	187b      	adds	r3, r7, r1
 8001064:	705a      	strb	r2, [r3, #1]
 8001066:	187b      	adds	r3, r7, r1
 8001068:	1cba      	adds	r2, r7, #2
 800106a:	7812      	ldrb	r2, [r2, #0]
 800106c:	709a      	strb	r2, [r3, #2]
        ( uint8_t ) ramp_time,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800106e:	1879      	adds	r1, r7, r1
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	2300      	movs	r3, #0
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2300      	movs	r3, #0
 8001078:	2203      	movs	r2, #3
 800107a:	f000 f9c5 	bl	8001408 <sx126x_hal_write>
 800107e:	0003      	movs	r3, r0
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b004      	add	sp, #16
 8001086:	bd80      	pop	{r7, pc}

08001088 <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af02      	add	r7, sp, #8
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
    sx126x_status_t status                                      = SX126X_STATUS_ERROR;
 8001092:	200f      	movs	r0, #15
 8001094:	183b      	adds	r3, r7, r0
 8001096:	2203      	movs	r2, #3
 8001098:	701a      	strb	r2, [r3, #0]
    const uint8_t   buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800109a:	2108      	movs	r1, #8
 800109c:	187b      	adds	r3, r7, r1
 800109e:	228b      	movs	r2, #139	; 0x8b
 80010a0:	701a      	strb	r2, [r3, #0]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	781a      	ldrb	r2, [r3, #0]
    const uint8_t   buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	705a      	strb	r2, [r3, #1]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	785a      	ldrb	r2, [r3, #1]
    const uint8_t   buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	789a      	ldrb	r2, [r3, #2]
    const uint8_t   buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	70da      	strb	r2, [r3, #3]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	78db      	ldrb	r3, [r3, #3]
 80010be:	2201      	movs	r2, #1
 80010c0:	4013      	ands	r3, r2
 80010c2:	b2da      	uxtb	r2, r3
    const uint8_t   buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	711a      	strb	r2, [r3, #4]
    };

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 80010c8:	0005      	movs	r5, r0
 80010ca:	183c      	adds	r4, r7, r0
 80010cc:	1879      	adds	r1, r7, r1
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	2300      	movs	r3, #0
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2300      	movs	r3, #0
 80010d6:	2205      	movs	r2, #5
 80010d8:	f000 f996 	bl	8001408 <sx126x_hal_write>
 80010dc:	0003      	movs	r3, r0
 80010de:	7023      	strb	r3, [r4, #0]

    if( status == SX126X_STATUS_OK )
 80010e0:	197b      	adds	r3, r7, r5
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d109      	bne.n	80010fc <sx126x_set_lora_mod_params+0x74>
    {
        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see datasheet DS_SX1261-2_V1.2 §15.1
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	785a      	ldrb	r2, [r3, #1]
 80010ec:	197c      	adds	r4, r7, r5
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2101      	movs	r1, #1
 80010f2:	0018      	movs	r0, r3
 80010f4:	f000 f932 	bl	800135c <sx126x_tx_modulation_workaround>
 80010f8:	0003      	movs	r3, r0
 80010fa:	7023      	strb	r3, [r4, #0]
        // WORKAROUND END
    }

    return status;
 80010fc:	230f      	movs	r3, #15
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	781b      	ldrb	r3, [r3, #0]
}
 8001102:	0018      	movs	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	b004      	add	sp, #16
 8001108:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800110c <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af02      	add	r7, sp, #8
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 8001116:	2317      	movs	r3, #23
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	2203      	movs	r2, #3
 800111c:	701a      	strb	r2, [r3, #0]

    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800111e:	2110      	movs	r1, #16
 8001120:	187b      	adds	r3, r7, r1
 8001122:	228c      	movs	r2, #140	; 0x8c
 8001124:	701a      	strb	r2, [r3, #0]
        SX126X_SET_PKT_PARAMS,
        ( uint8_t )( params->preamble_len_in_symb >> 8 ),
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	b29b      	uxth	r3, r3
 800112e:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 8001130:	187b      	adds	r3, r7, r1
 8001132:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( params->preamble_len_in_symb >> 0 ),
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800113a:	187b      	adds	r3, r7, r1
 800113c:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( params->header_type ),
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	789a      	ldrb	r2, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 8001142:	187b      	adds	r3, r7, r1
 8001144:	70da      	strb	r2, [r3, #3]
        params->pld_len_in_bytes,
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	78da      	ldrb	r2, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800114a:	187b      	adds	r3, r7, r1
 800114c:	711a      	strb	r2, [r3, #4]
        ( uint8_t )( params->crc_is_on ? 1 : 0 ),
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	791b      	ldrb	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <sx126x_set_lora_pkt_params+0x4e>
 8001156:	2201      	movs	r2, #1
 8001158:	e000      	b.n	800115c <sx126x_set_lora_pkt_params+0x50>
 800115a:	2200      	movs	r2, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800115c:	2310      	movs	r3, #16
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	715a      	strb	r2, [r3, #5]
        ( uint8_t )( params->invert_iq_is_on ? 1 : 0 ),
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	795b      	ldrb	r3, [r3, #5]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <sx126x_set_lora_pkt_params+0x62>
 800116a:	2201      	movs	r2, #1
 800116c:	e000      	b.n	8001170 <sx126x_set_lora_pkt_params+0x64>
 800116e:	2200      	movs	r2, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 8001170:	2110      	movs	r1, #16
 8001172:	187b      	adds	r3, r7, r1
 8001174:	719a      	strb	r2, [r3, #6]
    };

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 8001176:	2517      	movs	r5, #23
 8001178:	197c      	adds	r4, r7, r5
 800117a:	1879      	adds	r1, r7, r1
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	2300      	movs	r3, #0
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2300      	movs	r3, #0
 8001184:	2207      	movs	r2, #7
 8001186:	f000 f93f 	bl	8001408 <sx126x_hal_write>
 800118a:	0003      	movs	r3, r0
 800118c:	7023      	strb	r3, [r4, #0]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800118e:	197b      	adds	r3, r7, r5
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d12f      	bne.n	80011f6 <sx126x_set_lora_pkt_params+0xea>
    {
        uint8_t reg_value = 0;
 8001196:	260f      	movs	r6, #15
 8001198:	19bb      	adds	r3, r7, r6
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]

        status = sx126x_read_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800119e:	197c      	adds	r4, r7, r5
 80011a0:	19ba      	adds	r2, r7, r6
 80011a2:	4918      	ldr	r1, [pc, #96]	; (8001204 <sx126x_set_lora_pkt_params+0xf8>)
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	2301      	movs	r3, #1
 80011a8:	f7ff fe4b 	bl	8000e42 <sx126x_read_register>
 80011ac:	0003      	movs	r3, r0
 80011ae:	7023      	strb	r3, [r4, #0]
        if( status == SX126X_STATUS_OK )
 80011b0:	197b      	adds	r3, r7, r5
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d11e      	bne.n	80011f6 <sx126x_set_lora_pkt_params+0xea>
        {
            if( params->invert_iq_is_on == true )
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	795b      	ldrb	r3, [r3, #5]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d007      	beq.n	80011d0 <sx126x_set_lora_pkt_params+0xc4>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 80011c0:	19bb      	adds	r3, r7, r6
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2204      	movs	r2, #4
 80011c6:	4393      	bics	r3, r2
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	19bb      	adds	r3, r7, r6
 80011cc:	701a      	strb	r2, [r3, #0]
 80011ce:	e007      	b.n	80011e0 <sx126x_set_lora_pkt_params+0xd4>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 80011d0:	210f      	movs	r1, #15
 80011d2:	187b      	adds	r3, r7, r1
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2204      	movs	r2, #4
 80011d8:	4313      	orrs	r3, r2
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	701a      	strb	r2, [r3, #0]
            }
            status = sx126x_write_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 80011e0:	2317      	movs	r3, #23
 80011e2:	18fc      	adds	r4, r7, r3
 80011e4:	230f      	movs	r3, #15
 80011e6:	18fa      	adds	r2, r7, r3
 80011e8:	4906      	ldr	r1, [pc, #24]	; (8001204 <sx126x_set_lora_pkt_params+0xf8>)
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	2301      	movs	r3, #1
 80011ee:	f7ff fdf8 	bl	8000de2 <sx126x_write_register>
 80011f2:	0003      	movs	r3, r0
 80011f4:	7023      	strb	r3, [r4, #0]
        }
    }
    // WORKAROUND END

    return status;
 80011f6:	2317      	movs	r3, #23
 80011f8:	18fb      	adds	r3, r7, r3
 80011fa:	781b      	ldrb	r3, [r3, #0]
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	b007      	add	sp, #28
 8001202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001204:	00000736 	.word	0x00000736

08001208 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af02      	add	r7, sp, #8
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	0008      	movs	r0, r1
 8001212:	0011      	movs	r1, r2
 8001214:	1cfb      	adds	r3, r7, #3
 8001216:	1c02      	adds	r2, r0, #0
 8001218:	701a      	strb	r2, [r3, #0]
 800121a:	1cbb      	adds	r3, r7, #2
 800121c:	1c0a      	adds	r2, r1, #0
 800121e:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = {
 8001220:	210c      	movs	r1, #12
 8001222:	187b      	adds	r3, r7, r1
 8001224:	228f      	movs	r2, #143	; 0x8f
 8001226:	701a      	strb	r2, [r3, #0]
 8001228:	187b      	adds	r3, r7, r1
 800122a:	1cfa      	adds	r2, r7, #3
 800122c:	7812      	ldrb	r2, [r2, #0]
 800122e:	705a      	strb	r2, [r3, #1]
 8001230:	187b      	adds	r3, r7, r1
 8001232:	1cba      	adds	r2, r7, #2
 8001234:	7812      	ldrb	r2, [r2, #0]
 8001236:	709a      	strb	r2, [r3, #2]
        SX126X_SET_BUFFER_BASE_ADDRESS,
        tx_base_address,
        rx_base_address,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 8001238:	1879      	adds	r1, r7, r1
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	2300      	movs	r3, #0
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2300      	movs	r3, #0
 8001242:	2203      	movs	r2, #3
 8001244:	f000 f8e0 	bl	8001408 <sx126x_hal_write>
 8001248:	0003      	movs	r3, r0
}
 800124a:	0018      	movs	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	b004      	add	sp, #16
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4911      	ldr	r1, [pc, #68]	; (80012a4 <sx126x_convert_freq_in_hz_to_pll_step+0x50>)
 8001260:	0018      	movs	r0, r3
 8001262:	f7fe ff51 	bl	8000108 <__udivsi3>
 8001266:	0003      	movs	r3, r0
 8001268:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800126a:	68f9      	ldr	r1, [r7, #12]
 800126c:	000b      	movs	r3, r1
 800126e:	015b      	lsls	r3, r3, #5
 8001270:	1a5b      	subs	r3, r3, r1
 8001272:	019a      	lsls	r2, r3, #6
 8001274:	1ad2      	subs	r2, r2, r3
 8001276:	00d2      	lsls	r2, r2, #3
 8001278:	1853      	adds	r3, r2, r1
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	039c      	lsls	r4, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	039b      	lsls	r3, r3, #14
 8001288:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <sx126x_convert_freq_in_hz_to_pll_step+0x54>)
 800128a:	4694      	mov	ip, r2
 800128c:	4463      	add	r3, ip
 800128e:	4905      	ldr	r1, [pc, #20]	; (80012a4 <sx126x_convert_freq_in_hz_to_pll_step+0x50>)
 8001290:	0018      	movs	r0, r3
 8001292:	f7fe ff39 	bl	8000108 <__udivsi3>
 8001296:	0003      	movs	r3, r0
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 8001298:	18e3      	adds	r3, r4, r3
             SX126X_PLL_STEP_SCALED );
}
 800129a:	0018      	movs	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	b005      	add	sp, #20
 80012a0:	bd90      	pop	{r4, r7, pc}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	00003d09 	.word	0x00003d09
 80012a8:	00001e84 	.word	0x00001e84

080012ac <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	019b      	lsls	r3, r3, #6
}
 80012b8:	0018      	movs	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b002      	add	sp, #8
 80012be:	bd80      	pop	{r7, pc}

080012c0 <sx126x_set_lora_sync_word>:

    return status;
}

sx126x_status_t sx126x_set_lora_sync_word( const void* context, const uint8_t sync_word )
{
 80012c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	000a      	movs	r2, r1
 80012ca:	1cfb      	adds	r3, r7, #3
 80012cc:	701a      	strb	r2, [r3, #0]
    sx126x_status_t status    = SX126X_STATUS_ERROR;
 80012ce:	260f      	movs	r6, #15
 80012d0:	19bb      	adds	r3, r7, r6
 80012d2:	2203      	movs	r2, #3
 80012d4:	701a      	strb	r2, [r3, #0]
    uint8_t         buffer[2] = { 0x00 };
 80012d6:	250c      	movs	r5, #12
 80012d8:	197b      	adds	r3, r7, r5
 80012da:	2200      	movs	r2, #0
 80012dc:	801a      	strh	r2, [r3, #0]

    status = sx126x_read_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 80012de:	19bc      	adds	r4, r7, r6
 80012e0:	197a      	adds	r2, r7, r5
 80012e2:	23e8      	movs	r3, #232	; 0xe8
 80012e4:	00d9      	lsls	r1, r3, #3
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	2302      	movs	r3, #2
 80012ea:	f7ff fdaa 	bl	8000e42 <sx126x_read_register>
 80012ee:	0003      	movs	r3, r0
 80012f0:	7023      	strb	r3, [r4, #0]

    if( status == SX126X_STATUS_OK )
 80012f2:	0034      	movs	r4, r6
 80012f4:	193b      	adds	r3, r7, r4
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d128      	bne.n	800134e <sx126x_set_lora_sync_word+0x8e>
    {
        buffer[0] = ( buffer[0] & ~0xF0 ) + ( sync_word & 0xF0 );
 80012fc:	0028      	movs	r0, r5
 80012fe:	183b      	adds	r3, r7, r0
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b25b      	sxtb	r3, r3
 8001304:	220f      	movs	r2, #15
 8001306:	4013      	ands	r3, r2
 8001308:	b25a      	sxtb	r2, r3
 800130a:	1cfb      	adds	r3, r7, #3
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b25b      	sxtb	r3, r3
 8001310:	210f      	movs	r1, #15
 8001312:	438b      	bics	r3, r1
 8001314:	b25b      	sxtb	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b25b      	sxtb	r3, r3
 800131a:	b2da      	uxtb	r2, r3
 800131c:	183b      	adds	r3, r7, r0
 800131e:	701a      	strb	r2, [r3, #0]
        buffer[1] = ( buffer[1] & ~0xF0 ) + ( ( sync_word & 0x0F ) << 4 );
 8001320:	183b      	adds	r3, r7, r0
 8001322:	785b      	ldrb	r3, [r3, #1]
 8001324:	220f      	movs	r2, #15
 8001326:	4013      	ands	r3, r2
 8001328:	b2da      	uxtb	r2, r3
 800132a:	1cfb      	adds	r3, r7, #3
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	b2db      	uxtb	r3, r3
 8001332:	18d3      	adds	r3, r2, r3
 8001334:	b2da      	uxtb	r2, r3
 8001336:	183b      	adds	r3, r7, r0
 8001338:	705a      	strb	r2, [r3, #1]

        status = sx126x_write_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800133a:	193c      	adds	r4, r7, r4
 800133c:	183a      	adds	r2, r7, r0
 800133e:	23e8      	movs	r3, #232	; 0xe8
 8001340:	00d9      	lsls	r1, r3, #3
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	2302      	movs	r3, #2
 8001346:	f7ff fd4c 	bl	8000de2 <sx126x_write_register>
 800134a:	0003      	movs	r3, r0
 800134c:	7023      	strb	r3, [r4, #0]
    }

    return status;
 800134e:	230f      	movs	r3, #15
 8001350:	18fb      	adds	r3, r7, r3
 8001352:	781b      	ldrb	r3, [r3, #0]
}
 8001354:	0018      	movs	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	b005      	add	sp, #20
 800135a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800135c <sx126x_tx_modulation_workaround>:
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static sx126x_status_t sx126x_tx_modulation_workaround( const void* context, sx126x_pkt_type_t pkt_type,
                                                        sx126x_lora_bw_t bw )
{
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	0008      	movs	r0, r1
 8001366:	0011      	movs	r1, r2
 8001368:	1cfb      	adds	r3, r7, #3
 800136a:	1c02      	adds	r2, r0, #0
 800136c:	701a      	strb	r2, [r3, #0]
 800136e:	1cbb      	adds	r3, r7, #2
 8001370:	1c0a      	adds	r2, r1, #0
 8001372:	701a      	strb	r2, [r3, #0]
    sx126x_status_t status    = SX126X_STATUS_ERROR;
 8001374:	260f      	movs	r6, #15
 8001376:	19bb      	adds	r3, r7, r6
 8001378:	2203      	movs	r2, #3
 800137a:	701a      	strb	r2, [r3, #0]
    uint8_t         reg_value = 0;
 800137c:	250e      	movs	r5, #14
 800137e:	197b      	adds	r3, r7, r5
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]

    status = sx126x_read_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 8001384:	19bc      	adds	r4, r7, r6
 8001386:	197a      	adds	r2, r7, r5
 8001388:	491e      	ldr	r1, [pc, #120]	; (8001404 <sx126x_tx_modulation_workaround+0xa8>)
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	2301      	movs	r3, #1
 800138e:	f7ff fd58 	bl	8000e42 <sx126x_read_register>
 8001392:	0003      	movs	r3, r0
 8001394:	7023      	strb	r3, [r4, #0]

    if( status == SX126X_STATUS_OK )
 8001396:	19bb      	adds	r3, r7, r6
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d12b      	bne.n	80013f6 <sx126x_tx_modulation_workaround+0x9a>
    {
        if( pkt_type == SX126X_PKT_TYPE_LORA )
 800139e:	1cfb      	adds	r3, r7, #3
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d114      	bne.n	80013d0 <sx126x_tx_modulation_workaround+0x74>
        {
            if( bw == SX126X_LORA_BW_500 )
 80013a6:	1cbb      	adds	r3, r7, #2
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d107      	bne.n	80013be <sx126x_tx_modulation_workaround+0x62>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 if the LoRa BW = 500 kHz
 80013ae:	197b      	adds	r3, r7, r5
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2204      	movs	r2, #4
 80013b4:	4393      	bics	r3, r2
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	197b      	adds	r3, r7, r5
 80013ba:	701a      	strb	r2, [r3, #0]
 80013bc:	e010      	b.n	80013e0 <sx126x_tx_modulation_workaround+0x84>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any other LoRa BW
 80013be:	210e      	movs	r1, #14
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2204      	movs	r2, #4
 80013c6:	4313      	orrs	r3, r2
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	e007      	b.n	80013e0 <sx126x_tx_modulation_workaround+0x84>
            }
        }
        else
        {
            reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any (G)FSK configuration
 80013d0:	210e      	movs	r1, #14
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2204      	movs	r2, #4
 80013d8:	4313      	orrs	r3, r2
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	701a      	strb	r2, [r3, #0]
        }

        status = sx126x_write_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 80013e0:	230f      	movs	r3, #15
 80013e2:	18fc      	adds	r4, r7, r3
 80013e4:	230e      	movs	r3, #14
 80013e6:	18fa      	adds	r2, r7, r3
 80013e8:	4906      	ldr	r1, [pc, #24]	; (8001404 <sx126x_tx_modulation_workaround+0xa8>)
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	2301      	movs	r3, #1
 80013ee:	f7ff fcf8 	bl	8000de2 <sx126x_write_register>
 80013f2:	0003      	movs	r3, r0
 80013f4:	7023      	strb	r3, [r4, #0]
    }
    return status;
 80013f6:	230f      	movs	r3, #15
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	781b      	ldrb	r3, [r3, #0]
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	b005      	add	sp, #20
 8001402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001404:	00000889 	.word	0x00000889

08001408 <sx126x_hal_write>:
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_write( const void* context, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length )
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b087      	sub	sp, #28
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	1dbb      	adds	r3, r7, #6
 8001416:	801a      	strh	r2, [r3, #0]
    uint8_t retval = SX126X_HAL_STATUS_ERROR;
 8001418:	2317      	movs	r3, #23
 800141a:	18fb      	adds	r3, r7, r3
 800141c:	2203      	movs	r2, #3
 800141e:	701a      	strb	r2, [r3, #0]
	uint16_t PacketSize =  command_length + data_length;
 8001420:	2314      	movs	r3, #20
 8001422:	18fa      	adds	r2, r7, r3
 8001424:	1db9      	adds	r1, r7, #6
 8001426:	2328      	movs	r3, #40	; 0x28
 8001428:	18fb      	adds	r3, r7, r3
 800142a:	8809      	ldrh	r1, [r1, #0]
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	18cb      	adds	r3, r1, r3
 8001430:	8013      	strh	r3, [r2, #0]
	uint16_t aTxBuffer = ( ((int)command) << 8 ) || data ;
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	d102      	bne.n	800143e <sx126x_hal_write+0x36>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <sx126x_hal_write+0x3a>
 800143e:	2201      	movs	r2, #1
 8001440:	e000      	b.n	8001444 <sx126x_hal_write+0x3c>
 8001442:	2200      	movs	r2, #0
 8001444:	2112      	movs	r1, #18
 8001446:	187b      	adds	r3, r7, r1
 8001448:	801a      	strh	r2, [r3, #0]
	if (HAL_SPI_Transmit(context, (uint8_t*)aTxBuffer, PacketSize, 2000) == HAL_OK)
 800144a:	187b      	adds	r3, r7, r1
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	001c      	movs	r4, r3
 8001450:	23fa      	movs	r3, #250	; 0xfa
 8001452:	00d9      	lsls	r1, r3, #3
 8001454:	2314      	movs	r3, #20
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	881a      	ldrh	r2, [r3, #0]
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	000b      	movs	r3, r1
 800145e:	0021      	movs	r1, r4
 8001460:	f001 fc26 	bl	8002cb0 <HAL_SPI_Transmit>
 8001464:	1e03      	subs	r3, r0, #0
 8001466:	d103      	bne.n	8001470 <sx126x_hal_write+0x68>
    {
        retval = SX126X_HAL_STATUS_OK;
 8001468:	2317      	movs	r3, #23
 800146a:	18fb      	adds	r3, r7, r3
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
    }
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	0018      	movs	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	b007      	add	sp, #28
 8001478:	bd90      	pop	{r4, r7, pc}

0800147a <sx126x_hal_read>:
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* context, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint16_t data_length )
                                     {
 800147a:	b580      	push	{r7, lr}
 800147c:	b084      	sub	sp, #16
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	1dbb      	adds	r3, r7, #6
 8001488:	801a      	strh	r2, [r3, #0]
                                        //dummy code until function fleshed out
                                        return SX126X_HAL_STATUS_ERROR;
 800148a:	2303      	movs	r3, #3
                                     }
 800148c:	0018      	movs	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	b004      	add	sp, #16
 8001492:	bd80      	pop	{r7, pc}

08001494 <ReadyForTx>:
sx126x_hal_status_t sx126x_hal_wakeup( const void* context );



bool ReadyForTx(bool send)//set ANTSW low, DIO2 high to send; DIO2 low if not sending
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	0002      	movs	r2, r0
 800149c:	1dfb      	adds	r3, r7, #7
 800149e:	701a      	strb	r2, [r3, #0]
    bool retval = false;
 80014a0:	240f      	movs	r4, #15
 80014a2:	193b      	adds	r3, r7, r4
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]

    if (send)
 80014a8:	1dfb      	adds	r3, r7, #7
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d011      	beq.n	80014d4 <ReadyForTx+0x40>
    {
        HAL_GPIO_WritePin(ANT_SW_GPIO_Port, ANT_SW_Pin, GPIO_PIN_RESET);
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	0119      	lsls	r1, r3, #4
 80014b4:	23a0      	movs	r3, #160	; 0xa0
 80014b6:	05db      	lsls	r3, r3, #23
 80014b8:	2200      	movs	r2, #0
 80014ba:	0018      	movs	r0, r3
 80014bc:	f000 fb33 	bl	8001b26 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DIO2_GPIO_Port, DIO2_Pin, GPIO_PIN_SET);
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <ReadyForTx+0x74>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	2120      	movs	r1, #32
 80014c6:	0018      	movs	r0, r3
 80014c8:	f000 fb2d 	bl	8001b26 <HAL_GPIO_WritePin>
        retval = true;
 80014cc:	193b      	adds	r3, r7, r4
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
 80014d2:	e011      	b.n	80014f8 <ReadyForTx+0x64>
    }
    else
    {
        HAL_GPIO_WritePin(ANT_SW_GPIO_Port, ANT_SW_Pin, GPIO_PIN_RESET);
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	0119      	lsls	r1, r3, #4
 80014d8:	23a0      	movs	r3, #160	; 0xa0
 80014da:	05db      	lsls	r3, r3, #23
 80014dc:	2200      	movs	r2, #0
 80014de:	0018      	movs	r0, r3
 80014e0:	f000 fb21 	bl	8001b26 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DIO2_GPIO_Port,DIO2_Pin, GPIO_PIN_RESET);
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <ReadyForTx+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	2120      	movs	r1, #32
 80014ea:	0018      	movs	r0, r3
 80014ec:	f000 fb1b 	bl	8001b26 <HAL_GPIO_WritePin>
        retval = true;
 80014f0:	230f      	movs	r3, #15
 80014f2:	18fb      	adds	r3, r7, r3
 80014f4:	2201      	movs	r2, #1
 80014f6:	701a      	strb	r2, [r3, #0]
    }
    return retval;
 80014f8:	230f      	movs	r3, #15
 80014fa:	18fb      	adds	r3, r7, r3
 80014fc:	781b      	ldrb	r3, [r3, #0]
}
 80014fe:	0018      	movs	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	b005      	add	sp, #20
 8001504:	bd90      	pop	{r4, r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	50000400 	.word	0x50000400

0800150c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800150c:	480d      	ldr	r0, [pc, #52]	; (8001544 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800150e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <LoopForever+0x6>)
  ldr r1, =_edata
 8001512:	490e      	ldr	r1, [pc, #56]	; (800154c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001514:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <LoopForever+0xe>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001528:	4c0b      	ldr	r4, [pc, #44]	; (8001558 <LoopForever+0x16>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001536:	f7ff faf2 	bl	8000b1e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153a:	f002 fab3 	bl	8003aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153e:	f7ff f8e3 	bl	8000708 <main>

08001542 <LoopForever>:

LoopForever:
    b LoopForever
 8001542:	e7fe      	b.n	8001542 <LoopForever>
   ldr   r0, =_estack
 8001544:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001550:	08003b90 	.word	0x08003b90
  ldr r2, =_sbss
 8001554:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001558:	200001d8 	.word	0x200001d8

0800155c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC1_COMP_IRQHandler>
	...

08001560 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_Init+0x3c>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_Init+0x3c>)
 8001572:	2140      	movs	r1, #64	; 0x40
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001578:	2003      	movs	r0, #3
 800157a:	f000 f811 	bl	80015a0 <HAL_InitTick>
 800157e:	1e03      	subs	r3, r0, #0
 8001580:	d003      	beq.n	800158a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001582:	1dfb      	adds	r3, r7, #7
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
 8001588:	e001      	b.n	800158e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800158a:	f7ff fa9d 	bl	8000ac8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	781b      	ldrb	r3, [r3, #0]
}
 8001592:	0018      	movs	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	b002      	add	sp, #8
 8001598:	bd80      	pop	{r7, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	40022000 	.word	0x40022000

080015a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_InitTick+0x5c>)
 80015aa:	681c      	ldr	r4, [r3, #0]
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <HAL_InitTick+0x60>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	0019      	movs	r1, r3
 80015b2:	23fa      	movs	r3, #250	; 0xfa
 80015b4:	0098      	lsls	r0, r3, #2
 80015b6:	f7fe fda7 	bl	8000108 <__udivsi3>
 80015ba:	0003      	movs	r3, r0
 80015bc:	0019      	movs	r1, r3
 80015be:	0020      	movs	r0, r4
 80015c0:	f7fe fda2 	bl	8000108 <__udivsi3>
 80015c4:	0003      	movs	r3, r0
 80015c6:	0018      	movs	r0, r3
 80015c8:	f000 f905 	bl	80017d6 <HAL_SYSTICK_Config>
 80015cc:	1e03      	subs	r3, r0, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e00f      	b.n	80015f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d80b      	bhi.n	80015f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	2301      	movs	r3, #1
 80015de:	425b      	negs	r3, r3
 80015e0:	2200      	movs	r2, #0
 80015e2:	0018      	movs	r0, r3
 80015e4:	f000 f8e2 	bl	80017ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_InitTick+0x64>)
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e000      	b.n	80015f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	0018      	movs	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b003      	add	sp, #12
 80015fa:	bd90      	pop	{r4, r7, pc}
 80015fc:	20000000 	.word	0x20000000
 8001600:	20000008 	.word	0x20000008
 8001604:	20000004 	.word	0x20000004

08001608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_IncTick+0x1c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	001a      	movs	r2, r3
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_IncTick+0x20>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	18d2      	adds	r2, r2, r3
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <HAL_IncTick+0x20>)
 800161a:	601a      	str	r2, [r3, #0]
}
 800161c:	46c0      	nop			; (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	20000008 	.word	0x20000008
 8001628:	200001d4 	.word	0x200001d4

0800162c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;
 8001630:	4b02      	ldr	r3, [pc, #8]	; (800163c <HAL_GetTick+0x10>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	0018      	movs	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	200001d4 	.word	0x200001d4

08001640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001648:	f7ff fff0 	bl	800162c <HAL_GetTick>
 800164c:	0003      	movs	r3, r0
 800164e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	3301      	adds	r3, #1
 8001658:	d005      	beq.n	8001666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_Delay+0x44>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	001a      	movs	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	189b      	adds	r3, r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	f7ff ffe0 	bl	800162c <HAL_GetTick>
 800166c:	0002      	movs	r2, r0
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	429a      	cmp	r2, r3
 8001676:	d8f7      	bhi.n	8001668 <HAL_Delay+0x28>
  {
  }
}
 8001678:	46c0      	nop			; (mov r8, r8)
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	46bd      	mov	sp, r7
 800167e:	b004      	add	sp, #16
 8001680:	bd80      	pop	{r7, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	20000008 	.word	0x20000008

08001688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	0002      	movs	r2, r0
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	1dfb      	adds	r3, r7, #7
 8001694:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001696:	1dfb      	adds	r3, r7, #7
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b7f      	cmp	r3, #127	; 0x7f
 800169c:	d828      	bhi.n	80016f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800169e:	4a2f      	ldr	r2, [pc, #188]	; (800175c <__NVIC_SetPriority+0xd4>)
 80016a0:	1dfb      	adds	r3, r7, #7
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	33c0      	adds	r3, #192	; 0xc0
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	589b      	ldr	r3, [r3, r2]
 80016ae:	1dfa      	adds	r2, r7, #7
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	0011      	movs	r1, r2
 80016b4:	2203      	movs	r2, #3
 80016b6:	400a      	ands	r2, r1
 80016b8:	00d2      	lsls	r2, r2, #3
 80016ba:	21ff      	movs	r1, #255	; 0xff
 80016bc:	4091      	lsls	r1, r2
 80016be:	000a      	movs	r2, r1
 80016c0:	43d2      	mvns	r2, r2
 80016c2:	401a      	ands	r2, r3
 80016c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	019b      	lsls	r3, r3, #6
 80016ca:	22ff      	movs	r2, #255	; 0xff
 80016cc:	401a      	ands	r2, r3
 80016ce:	1dfb      	adds	r3, r7, #7
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	0018      	movs	r0, r3
 80016d4:	2303      	movs	r3, #3
 80016d6:	4003      	ands	r3, r0
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016dc:	481f      	ldr	r0, [pc, #124]	; (800175c <__NVIC_SetPriority+0xd4>)
 80016de:	1dfb      	adds	r3, r7, #7
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	089b      	lsrs	r3, r3, #2
 80016e6:	430a      	orrs	r2, r1
 80016e8:	33c0      	adds	r3, #192	; 0xc0
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016ee:	e031      	b.n	8001754 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016f0:	4a1b      	ldr	r2, [pc, #108]	; (8001760 <__NVIC_SetPriority+0xd8>)
 80016f2:	1dfb      	adds	r3, r7, #7
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	0019      	movs	r1, r3
 80016f8:	230f      	movs	r3, #15
 80016fa:	400b      	ands	r3, r1
 80016fc:	3b08      	subs	r3, #8
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	3306      	adds	r3, #6
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	18d3      	adds	r3, r2, r3
 8001706:	3304      	adds	r3, #4
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	1dfa      	adds	r2, r7, #7
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	0011      	movs	r1, r2
 8001710:	2203      	movs	r2, #3
 8001712:	400a      	ands	r2, r1
 8001714:	00d2      	lsls	r2, r2, #3
 8001716:	21ff      	movs	r1, #255	; 0xff
 8001718:	4091      	lsls	r1, r2
 800171a:	000a      	movs	r2, r1
 800171c:	43d2      	mvns	r2, r2
 800171e:	401a      	ands	r2, r3
 8001720:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	019b      	lsls	r3, r3, #6
 8001726:	22ff      	movs	r2, #255	; 0xff
 8001728:	401a      	ands	r2, r3
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	0018      	movs	r0, r3
 8001730:	2303      	movs	r3, #3
 8001732:	4003      	ands	r3, r0
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001738:	4809      	ldr	r0, [pc, #36]	; (8001760 <__NVIC_SetPriority+0xd8>)
 800173a:	1dfb      	adds	r3, r7, #7
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	001c      	movs	r4, r3
 8001740:	230f      	movs	r3, #15
 8001742:	4023      	ands	r3, r4
 8001744:	3b08      	subs	r3, #8
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	430a      	orrs	r2, r1
 800174a:	3306      	adds	r3, #6
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	18c3      	adds	r3, r0, r3
 8001750:	3304      	adds	r3, #4
 8001752:	601a      	str	r2, [r3, #0]
}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b003      	add	sp, #12
 800175a:	bd90      	pop	{r4, r7, pc}
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	1e5a      	subs	r2, r3, #1
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	045b      	lsls	r3, r3, #17
 8001774:	429a      	cmp	r2, r3
 8001776:	d301      	bcc.n	800177c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001778:	2301      	movs	r3, #1
 800177a:	e010      	b.n	800179e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <SysTick_Config+0x44>)
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	3a01      	subs	r2, #1
 8001782:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001784:	2301      	movs	r3, #1
 8001786:	425b      	negs	r3, r3
 8001788:	2103      	movs	r1, #3
 800178a:	0018      	movs	r0, r3
 800178c:	f7ff ff7c 	bl	8001688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <SysTick_Config+0x44>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <SysTick_Config+0x44>)
 8001798:	2207      	movs	r2, #7
 800179a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800179c:	2300      	movs	r3, #0
}
 800179e:	0018      	movs	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b002      	add	sp, #8
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	e000e010 	.word	0xe000e010

080017ac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	210f      	movs	r1, #15
 80017b8:	187b      	adds	r3, r7, r1
 80017ba:	1c02      	adds	r2, r0, #0
 80017bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	0011      	movs	r1, r2
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7ff ff5d 	bl	8001688 <__NVIC_SetPriority>
}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b004      	add	sp, #16
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	0018      	movs	r0, r3
 80017e2:	f7ff ffbf 	bl	8001764 <SysTick_Config>
 80017e6:	0003      	movs	r3, r0
}
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b002      	add	sp, #8
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001806:	e155      	b.n	8001ab4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2101      	movs	r1, #1
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4091      	lsls	r1, r2
 8001812:	000a      	movs	r2, r1
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d100      	bne.n	8001820 <HAL_GPIO_Init+0x30>
 800181e:	e146      	b.n	8001aae <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2203      	movs	r2, #3
 8001826:	4013      	ands	r3, r2
 8001828:	2b01      	cmp	r3, #1
 800182a:	d005      	beq.n	8001838 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2203      	movs	r2, #3
 8001832:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001834:	2b02      	cmp	r3, #2
 8001836:	d130      	bne.n	800189a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	409a      	lsls	r2, r3
 8001846:	0013      	movs	r3, r2
 8001848:	43da      	mvns	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	409a      	lsls	r2, r3
 800185a:	0013      	movs	r3, r2
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800186e:	2201      	movs	r2, #1
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	409a      	lsls	r2, r3
 8001874:	0013      	movs	r3, r2
 8001876:	43da      	mvns	r2, r3
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	2201      	movs	r2, #1
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
 800188c:	0013      	movs	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2203      	movs	r2, #3
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d017      	beq.n	80018d6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	409a      	lsls	r2, r3
 80018b4:	0013      	movs	r3, r2
 80018b6:	43da      	mvns	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	409a      	lsls	r2, r3
 80018c8:	0013      	movs	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2203      	movs	r2, #3
 80018dc:	4013      	ands	r3, r2
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d123      	bne.n	800192a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	08da      	lsrs	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3208      	adds	r2, #8
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	58d3      	ldr	r3, [r2, r3]
 80018ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2207      	movs	r2, #7
 80018f4:	4013      	ands	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	409a      	lsls	r2, r3
 80018fc:	0013      	movs	r3, r2
 80018fe:	43da      	mvns	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	691a      	ldr	r2, [r3, #16]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2107      	movs	r1, #7
 800190e:	400b      	ands	r3, r1
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	409a      	lsls	r2, r3
 8001914:	0013      	movs	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	08da      	lsrs	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3208      	adds	r2, #8
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	6939      	ldr	r1, [r7, #16]
 8001928:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	409a      	lsls	r2, r3
 8001938:	0013      	movs	r3, r2
 800193a:	43da      	mvns	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2203      	movs	r2, #3
 8001948:	401a      	ands	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	409a      	lsls	r2, r3
 8001950:	0013      	movs	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	23c0      	movs	r3, #192	; 0xc0
 8001964:	029b      	lsls	r3, r3, #10
 8001966:	4013      	ands	r3, r2
 8001968:	d100      	bne.n	800196c <HAL_GPIO_Init+0x17c>
 800196a:	e0a0      	b.n	8001aae <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196c:	4b57      	ldr	r3, [pc, #348]	; (8001acc <HAL_GPIO_Init+0x2dc>)
 800196e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001970:	4b56      	ldr	r3, [pc, #344]	; (8001acc <HAL_GPIO_Init+0x2dc>)
 8001972:	2101      	movs	r1, #1
 8001974:	430a      	orrs	r2, r1
 8001976:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001978:	4a55      	ldr	r2, [pc, #340]	; (8001ad0 <HAL_GPIO_Init+0x2e0>)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	089b      	lsrs	r3, r3, #2
 800197e:	3302      	adds	r3, #2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	589b      	ldr	r3, [r3, r2]
 8001984:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2203      	movs	r2, #3
 800198a:	4013      	ands	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	220f      	movs	r2, #15
 8001990:	409a      	lsls	r2, r3
 8001992:	0013      	movs	r3, r2
 8001994:	43da      	mvns	r2, r3
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	23a0      	movs	r3, #160	; 0xa0
 80019a0:	05db      	lsls	r3, r3, #23
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d01f      	beq.n	80019e6 <HAL_GPIO_Init+0x1f6>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4a      	ldr	r2, [pc, #296]	; (8001ad4 <HAL_GPIO_Init+0x2e4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d019      	beq.n	80019e2 <HAL_GPIO_Init+0x1f2>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a49      	ldr	r2, [pc, #292]	; (8001ad8 <HAL_GPIO_Init+0x2e8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <HAL_GPIO_Init+0x1ee>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a48      	ldr	r2, [pc, #288]	; (8001adc <HAL_GPIO_Init+0x2ec>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00d      	beq.n	80019da <HAL_GPIO_Init+0x1ea>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a47      	ldr	r2, [pc, #284]	; (8001ae0 <HAL_GPIO_Init+0x2f0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d007      	beq.n	80019d6 <HAL_GPIO_Init+0x1e6>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a46      	ldr	r2, [pc, #280]	; (8001ae4 <HAL_GPIO_Init+0x2f4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_GPIO_Init+0x1e2>
 80019ce:	2305      	movs	r3, #5
 80019d0:	e00a      	b.n	80019e8 <HAL_GPIO_Init+0x1f8>
 80019d2:	2306      	movs	r3, #6
 80019d4:	e008      	b.n	80019e8 <HAL_GPIO_Init+0x1f8>
 80019d6:	2304      	movs	r3, #4
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x1f8>
 80019da:	2303      	movs	r3, #3
 80019dc:	e004      	b.n	80019e8 <HAL_GPIO_Init+0x1f8>
 80019de:	2302      	movs	r3, #2
 80019e0:	e002      	b.n	80019e8 <HAL_GPIO_Init+0x1f8>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_GPIO_Init+0x1f8>
 80019e6:	2300      	movs	r3, #0
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	2103      	movs	r1, #3
 80019ec:	400a      	ands	r2, r1
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	4093      	lsls	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f8:	4935      	ldr	r1, [pc, #212]	; (8001ad0 <HAL_GPIO_Init+0x2e0>)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a06:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <HAL_GPIO_Init+0x2f8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	025b      	lsls	r3, r3, #9
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <HAL_GPIO_Init+0x2f8>)
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a30:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <HAL_GPIO_Init+0x2f8>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43da      	mvns	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	029b      	lsls	r3, r3, #10
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a54:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <HAL_GPIO_Init+0x2f8>)
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5a:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <HAL_GPIO_Init+0x2f8>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43da      	mvns	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	035b      	lsls	r3, r3, #13
 8001a72:	4013      	ands	r3, r2
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HAL_GPIO_Init+0x2f8>)
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a84:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <HAL_GPIO_Init+0x2f8>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	039b      	lsls	r3, r3, #14
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <HAL_GPIO_Init+0x2f8>)
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	40da      	lsrs	r2, r3
 8001abc:	1e13      	subs	r3, r2, #0
 8001abe:	d000      	beq.n	8001ac2 <HAL_GPIO_Init+0x2d2>
 8001ac0:	e6a2      	b.n	8001808 <HAL_GPIO_Init+0x18>
  }
}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b006      	add	sp, #24
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	50000400 	.word	0x50000400
 8001ad8:	50000800 	.word	0x50000800
 8001adc:	50000c00 	.word	0x50000c00
 8001ae0:	50001000 	.word	0x50001000
 8001ae4:	50001c00 	.word	0x50001c00
 8001ae8:	40010400 	.word	0x40010400

08001aec <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	000a      	movs	r2, r1
 8001af6:	1cbb      	adds	r3, r7, #2
 8001af8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	1cba      	adds	r2, r7, #2
 8001b00:	8812      	ldrh	r2, [r2, #0]
 8001b02:	4013      	ands	r3, r2
 8001b04:	d004      	beq.n	8001b10 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b06:	230f      	movs	r3, #15
 8001b08:	18fb      	adds	r3, r7, r3
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]
 8001b0e:	e003      	b.n	8001b18 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b10:	230f      	movs	r3, #15
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b18:	230f      	movs	r3, #15
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	781b      	ldrb	r3, [r3, #0]
}
 8001b1e:	0018      	movs	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b004      	add	sp, #16
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	0008      	movs	r0, r1
 8001b30:	0011      	movs	r1, r2
 8001b32:	1cbb      	adds	r3, r7, #2
 8001b34:	1c02      	adds	r2, r0, #0
 8001b36:	801a      	strh	r2, [r3, #0]
 8001b38:	1c7b      	adds	r3, r7, #1
 8001b3a:	1c0a      	adds	r2, r1, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b3e:	1c7b      	adds	r3, r7, #1
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d004      	beq.n	8001b50 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b46:	1cbb      	adds	r3, r7, #2
 8001b48:	881a      	ldrh	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001b4e:	e003      	b.n	8001b58 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001b50:	1cbb      	adds	r3, r7, #2
 8001b52:	881a      	ldrh	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b58:	46c0      	nop			; (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b002      	add	sp, #8
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e082      	b.n	8001c78 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2241      	movs	r2, #65	; 0x41
 8001b76:	5c9b      	ldrb	r3, [r3, r2]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d107      	bne.n	8001b8e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2240      	movs	r2, #64	; 0x40
 8001b82:	2100      	movs	r1, #0
 8001b84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f7fe fd79 	bl	8000680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2241      	movs	r2, #65	; 0x41
 8001b92:	2124      	movs	r1, #36	; 0x24
 8001b94:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	438a      	bics	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4934      	ldr	r1, [pc, #208]	; (8001c80 <HAL_I2C_Init+0x120>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4931      	ldr	r1, [pc, #196]	; (8001c84 <HAL_I2C_Init+0x124>)
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d108      	bne.n	8001bde <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2180      	movs	r1, #128	; 0x80
 8001bd6:	0209      	lsls	r1, r1, #8
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	e007      	b.n	8001bee <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2184      	movs	r1, #132	; 0x84
 8001be8:	0209      	lsls	r1, r1, #8
 8001bea:	430a      	orrs	r2, r1
 8001bec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d104      	bne.n	8001c00 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	491f      	ldr	r1, [pc, #124]	; (8001c88 <HAL_I2C_Init+0x128>)
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	491a      	ldr	r1, [pc, #104]	; (8001c84 <HAL_I2C_Init+0x124>)
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69d9      	ldr	r1, [r3, #28]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1a      	ldr	r2, [r3, #32]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2101      	movs	r1, #1
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2241      	movs	r2, #65	; 0x41
 8001c64:	2120      	movs	r1, #32
 8001c66:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2242      	movs	r2, #66	; 0x42
 8001c72:	2100      	movs	r1, #0
 8001c74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	0018      	movs	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b002      	add	sp, #8
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	f0ffffff 	.word	0xf0ffffff
 8001c84:	ffff7fff 	.word	0xffff7fff
 8001c88:	02008000 	.word	0x02008000

08001c8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2241      	movs	r2, #65	; 0x41
 8001c9a:	5c9b      	ldrb	r3, [r3, r2]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d138      	bne.n	8001d14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2240      	movs	r2, #64	; 0x40
 8001ca6:	5c9b      	ldrb	r3, [r3, r2]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e032      	b.n	8001d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2240      	movs	r2, #64	; 0x40
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2241      	movs	r2, #65	; 0x41
 8001cbc:	2124      	movs	r1, #36	; 0x24
 8001cbe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2101      	movs	r1, #1
 8001ccc:	438a      	bics	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4911      	ldr	r1, [pc, #68]	; (8001d20 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001cdc:	400a      	ands	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6819      	ldr	r1, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2241      	movs	r2, #65	; 0x41
 8001d04:	2120      	movs	r1, #32
 8001d06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	e000      	b.n	8001d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d14:	2302      	movs	r3, #2
  }
}
 8001d16:	0018      	movs	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b002      	add	sp, #8
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	ffffefff 	.word	0xffffefff

08001d24 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2241      	movs	r2, #65	; 0x41
 8001d32:	5c9b      	ldrb	r3, [r3, r2]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	d139      	bne.n	8001dae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2240      	movs	r2, #64	; 0x40
 8001d3e:	5c9b      	ldrb	r3, [r3, r2]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e033      	b.n	8001db0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2240      	movs	r2, #64	; 0x40
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2241      	movs	r2, #65	; 0x41
 8001d54:	2124      	movs	r1, #36	; 0x24
 8001d56:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2101      	movs	r1, #1
 8001d64:	438a      	bics	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4a11      	ldr	r2, [pc, #68]	; (8001db8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2101      	movs	r1, #1
 8001d96:	430a      	orrs	r2, r1
 8001d98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2241      	movs	r2, #65	; 0x41
 8001d9e:	2120      	movs	r1, #32
 8001da0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2240      	movs	r2, #64	; 0x40
 8001da6:	2100      	movs	r1, #0
 8001da8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e000      	b.n	8001db0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dae:	2302      	movs	r3, #2
  }
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b004      	add	sp, #16
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	fffff0ff 	.word	0xfffff0ff

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b5b0      	push	{r4, r5, r7, lr}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f000 fb6c 	bl	80024a8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd0:	4bc8      	ldr	r3, [pc, #800]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dda:	4bc6      	ldr	r3, [pc, #792]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	025b      	lsls	r3, r3, #9
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2201      	movs	r2, #1
 8001dec:	4013      	ands	r3, r2
 8001dee:	d100      	bne.n	8001df2 <HAL_RCC_OscConfig+0x36>
 8001df0:	e07d      	b.n	8001eee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d007      	beq.n	8001e08 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d112      	bne.n	8001e24 <HAL_RCC_OscConfig+0x68>
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	025b      	lsls	r3, r3, #9
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d10d      	bne.n	8001e24 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	4bba      	ldr	r3, [pc, #744]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	029b      	lsls	r3, r3, #10
 8001e10:	4013      	ands	r3, r2
 8001e12:	d100      	bne.n	8001e16 <HAL_RCC_OscConfig+0x5a>
 8001e14:	e06a      	b.n	8001eec <HAL_RCC_OscConfig+0x130>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d166      	bne.n	8001eec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f000 fb42 	bl	80024a8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	025b      	lsls	r3, r3, #9
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_OscConfig+0x84>
 8001e30:	4bb0      	ldr	r3, [pc, #704]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4baf      	ldr	r3, [pc, #700]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	0249      	lsls	r1, r1, #9
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e027      	b.n	8001e90 <HAL_RCC_OscConfig+0xd4>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	23a0      	movs	r3, #160	; 0xa0
 8001e46:	02db      	lsls	r3, r3, #11
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d10e      	bne.n	8001e6a <HAL_RCC_OscConfig+0xae>
 8001e4c:	4ba9      	ldr	r3, [pc, #676]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4ba8      	ldr	r3, [pc, #672]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e52:	2180      	movs	r1, #128	; 0x80
 8001e54:	02c9      	lsls	r1, r1, #11
 8001e56:	430a      	orrs	r2, r1
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	4ba6      	ldr	r3, [pc, #664]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4ba5      	ldr	r3, [pc, #660]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e60:	2180      	movs	r1, #128	; 0x80
 8001e62:	0249      	lsls	r1, r1, #9
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	e012      	b.n	8001e90 <HAL_RCC_OscConfig+0xd4>
 8001e6a:	4ba2      	ldr	r3, [pc, #648]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4ba1      	ldr	r3, [pc, #644]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e70:	49a1      	ldr	r1, [pc, #644]	; (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001e72:	400a      	ands	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	4b9f      	ldr	r3, [pc, #636]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	025b      	lsls	r3, r3, #9
 8001e7e:	4013      	ands	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4b9b      	ldr	r3, [pc, #620]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b9a      	ldr	r3, [pc, #616]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e8a:	499c      	ldr	r1, [pc, #624]	; (80020fc <HAL_RCC_OscConfig+0x340>)
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d014      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff fbc8 	bl	800162c <HAL_GetTick>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea2:	f7ff fbc3 	bl	800162c <HAL_GetTick>
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b64      	cmp	r3, #100	; 0x64
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e2f9      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eb4:	4b8f      	ldr	r3, [pc, #572]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	029b      	lsls	r3, r3, #10
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0xe6>
 8001ec0:	e015      	b.n	8001eee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fbb3 	bl	800162c <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7ff fbae 	bl	800162c <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e2e4      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ede:	4b85      	ldr	r3, [pc, #532]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	029b      	lsls	r3, r3, #10
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x110>
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d100      	bne.n	8001efa <HAL_RCC_OscConfig+0x13e>
 8001ef8:	e099      	b.n	800202e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	2220      	movs	r2, #32
 8001f04:	4013      	ands	r3, r2
 8001f06:	d009      	beq.n	8001f1c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001f08:	4b7a      	ldr	r3, [pc, #488]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b79      	ldr	r3, [pc, #484]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f0e:	2120      	movs	r1, #32
 8001f10:	430a      	orrs	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	2220      	movs	r2, #32
 8001f18:	4393      	bics	r3, r2
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d005      	beq.n	8001f2e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	2b0c      	cmp	r3, #12
 8001f26:	d13e      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x1ea>
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d13b      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001f2e:	4b71      	ldr	r3, [pc, #452]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2204      	movs	r2, #4
 8001f34:	4013      	ands	r3, r2
 8001f36:	d004      	beq.n	8001f42 <HAL_RCC_OscConfig+0x186>
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e2b2      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f42:	4b6c      	ldr	r3, [pc, #432]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4a6e      	ldr	r2, [pc, #440]	; (8002100 <HAL_RCC_OscConfig+0x344>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	021a      	lsls	r2, r3, #8
 8001f52:	4b68      	ldr	r3, [pc, #416]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f54:	430a      	orrs	r2, r1
 8001f56:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f58:	4b66      	ldr	r3, [pc, #408]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2209      	movs	r2, #9
 8001f5e:	4393      	bics	r3, r2
 8001f60:	0019      	movs	r1, r3
 8001f62:	4b64      	ldr	r3, [pc, #400]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f66:	430a      	orrs	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f6a:	f000 fbeb 	bl	8002744 <HAL_RCC_GetSysClockFreq>
 8001f6e:	0001      	movs	r1, r0
 8001f70:	4b60      	ldr	r3, [pc, #384]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	220f      	movs	r2, #15
 8001f78:	4013      	ands	r3, r2
 8001f7a:	4a62      	ldr	r2, [pc, #392]	; (8002104 <HAL_RCC_OscConfig+0x348>)
 8001f7c:	5cd3      	ldrb	r3, [r2, r3]
 8001f7e:	000a      	movs	r2, r1
 8001f80:	40da      	lsrs	r2, r3
 8001f82:	4b61      	ldr	r3, [pc, #388]	; (8002108 <HAL_RCC_OscConfig+0x34c>)
 8001f84:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001f86:	4b61      	ldr	r3, [pc, #388]	; (800210c <HAL_RCC_OscConfig+0x350>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2513      	movs	r5, #19
 8001f8c:	197c      	adds	r4, r7, r5
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f7ff fb06 	bl	80015a0 <HAL_InitTick>
 8001f94:	0003      	movs	r3, r0
 8001f96:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001f98:	197b      	adds	r3, r7, r5
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d046      	beq.n	800202e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001fa0:	197b      	adds	r3, r7, r5
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	e280      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d027      	beq.n	8001ffc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001fac:	4b51      	ldr	r3, [pc, #324]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2209      	movs	r2, #9
 8001fb2:	4393      	bics	r3, r2
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	4b4f      	ldr	r3, [pc, #316]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7ff fb35 	bl	800162c <HAL_GetTick>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc8:	f7ff fb30 	bl	800162c <HAL_GetTick>
 8001fcc:	0002      	movs	r2, r0
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e266      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fda:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2204      	movs	r2, #4
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d0f1      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe4:	4b43      	ldr	r3, [pc, #268]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4a45      	ldr	r2, [pc, #276]	; (8002100 <HAL_RCC_OscConfig+0x344>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	0019      	movs	r1, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	021a      	lsls	r2, r3, #8
 8001ff4:	4b3f      	ldr	r3, [pc, #252]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	e018      	b.n	800202e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffc:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8002002:	2101      	movs	r1, #1
 8002004:	438a      	bics	r2, r1
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fb10 	bl	800162c <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002012:	f7ff fb0b 	bl	800162c <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e241      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002024:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2204      	movs	r2, #4
 800202a:	4013      	ands	r3, r2
 800202c:	d1f1      	bne.n	8002012 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2210      	movs	r2, #16
 8002034:	4013      	ands	r3, r2
 8002036:	d100      	bne.n	800203a <HAL_RCC_OscConfig+0x27e>
 8002038:	e0a1      	b.n	800217e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d140      	bne.n	80020c2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002040:	4b2c      	ldr	r3, [pc, #176]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4013      	ands	r3, r2
 800204a:	d005      	beq.n	8002058 <HAL_RCC_OscConfig+0x29c>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e227      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002058:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4a2c      	ldr	r2, [pc, #176]	; (8002110 <HAL_RCC_OscConfig+0x354>)
 800205e:	4013      	ands	r3, r2
 8002060:	0019      	movs	r1, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1a      	ldr	r2, [r3, #32]
 8002066:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8002068:	430a      	orrs	r2, r1
 800206a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800206c:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	021b      	lsls	r3, r3, #8
 8002072:	0a19      	lsrs	r1, r3, #8
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	061a      	lsls	r2, r3, #24
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 800207c:	430a      	orrs	r2, r1
 800207e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	0b5b      	lsrs	r3, r3, #13
 8002086:	3301      	adds	r3, #1
 8002088:	2280      	movs	r2, #128	; 0x80
 800208a:	0212      	lsls	r2, r2, #8
 800208c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800208e:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	091b      	lsrs	r3, r3, #4
 8002094:	210f      	movs	r1, #15
 8002096:	400b      	ands	r3, r1
 8002098:	491a      	ldr	r1, [pc, #104]	; (8002104 <HAL_RCC_OscConfig+0x348>)
 800209a:	5ccb      	ldrb	r3, [r1, r3]
 800209c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <HAL_RCC_OscConfig+0x34c>)
 80020a0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <HAL_RCC_OscConfig+0x350>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2513      	movs	r5, #19
 80020a8:	197c      	adds	r4, r7, r5
 80020aa:	0018      	movs	r0, r3
 80020ac:	f7ff fa78 	bl	80015a0 <HAL_InitTick>
 80020b0:	0003      	movs	r3, r0
 80020b2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80020b4:	197b      	adds	r3, r7, r5
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d060      	beq.n	800217e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80020bc:	197b      	adds	r3, r7, r5
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	e1f2      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d03f      	beq.n	800214a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_RCC_OscConfig+0x338>)
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	0049      	lsls	r1, r1, #1
 80020d4:	430a      	orrs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff faa8 	bl	800162c <HAL_GetTick>
 80020dc:	0003      	movs	r3, r0
 80020de:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020e0:	e018      	b.n	8002114 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020e2:	f7ff faa3 	bl	800162c <HAL_GetTick>
 80020e6:	0002      	movs	r2, r0
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d911      	bls.n	8002114 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e1d9      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
 80020f4:	40021000 	.word	0x40021000
 80020f8:	fffeffff 	.word	0xfffeffff
 80020fc:	fffbffff 	.word	0xfffbffff
 8002100:	ffffe0ff 	.word	0xffffe0ff
 8002104:	08003b14 	.word	0x08003b14
 8002108:	20000000 	.word	0x20000000
 800210c:	20000004 	.word	0x20000004
 8002110:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002114:	4bc9      	ldr	r3, [pc, #804]	; (800243c <HAL_RCC_OscConfig+0x680>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4013      	ands	r3, r2
 800211e:	d0e0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002120:	4bc6      	ldr	r3, [pc, #792]	; (800243c <HAL_RCC_OscConfig+0x680>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4ac6      	ldr	r2, [pc, #792]	; (8002440 <HAL_RCC_OscConfig+0x684>)
 8002126:	4013      	ands	r3, r2
 8002128:	0019      	movs	r1, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1a      	ldr	r2, [r3, #32]
 800212e:	4bc3      	ldr	r3, [pc, #780]	; (800243c <HAL_RCC_OscConfig+0x680>)
 8002130:	430a      	orrs	r2, r1
 8002132:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002134:	4bc1      	ldr	r3, [pc, #772]	; (800243c <HAL_RCC_OscConfig+0x680>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	0a19      	lsrs	r1, r3, #8
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	061a      	lsls	r2, r3, #24
 8002142:	4bbe      	ldr	r3, [pc, #760]	; (800243c <HAL_RCC_OscConfig+0x680>)
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	e019      	b.n	800217e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800214a:	4bbc      	ldr	r3, [pc, #752]	; (800243c <HAL_RCC_OscConfig+0x680>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4bbb      	ldr	r3, [pc, #748]	; (800243c <HAL_RCC_OscConfig+0x680>)
 8002150:	49bc      	ldr	r1, [pc, #752]	; (8002444 <HAL_RCC_OscConfig+0x688>)
 8002152:	400a      	ands	r2, r1
 8002154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002156:	f7ff fa69 	bl	800162c <HAL_GetTick>
 800215a:	0003      	movs	r3, r0
 800215c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002160:	f7ff fa64 	bl	800162c <HAL_GetTick>
 8002164:	0002      	movs	r2, r0
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e19a      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002172:	4bb2      	ldr	r3, [pc, #712]	; (800243c <HAL_RCC_OscConfig+0x680>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4013      	ands	r3, r2
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2208      	movs	r2, #8
 8002184:	4013      	ands	r3, r2
 8002186:	d036      	beq.n	80021f6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d019      	beq.n	80021c4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002190:	4baa      	ldr	r3, [pc, #680]	; (800243c <HAL_RCC_OscConfig+0x680>)
 8002192:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002194:	4ba9      	ldr	r3, [pc, #676]	; (800243c <HAL_RCC_OscConfig+0x680>)
 8002196:	2101      	movs	r1, #1
 8002198:	430a      	orrs	r2, r1
 800219a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219c:	f7ff fa46 	bl	800162c <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a6:	f7ff fa41 	bl	800162c <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e177      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021b8:	4ba0      	ldr	r3, [pc, #640]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80021ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021bc:	2202      	movs	r2, #2
 80021be:	4013      	ands	r3, r2
 80021c0:	d0f1      	beq.n	80021a6 <HAL_RCC_OscConfig+0x3ea>
 80021c2:	e018      	b.n	80021f6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c4:	4b9d      	ldr	r3, [pc, #628]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80021c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021c8:	4b9c      	ldr	r3, [pc, #624]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80021ca:	2101      	movs	r1, #1
 80021cc:	438a      	bics	r2, r1
 80021ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d0:	f7ff fa2c 	bl	800162c <HAL_GetTick>
 80021d4:	0003      	movs	r3, r0
 80021d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021da:	f7ff fa27 	bl	800162c <HAL_GetTick>
 80021de:	0002      	movs	r2, r0
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e15d      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021ec:	4b93      	ldr	r3, [pc, #588]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80021ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f0:	2202      	movs	r2, #2
 80021f2:	4013      	ands	r3, r2
 80021f4:	d1f1      	bne.n	80021da <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2204      	movs	r2, #4
 80021fc:	4013      	ands	r3, r2
 80021fe:	d100      	bne.n	8002202 <HAL_RCC_OscConfig+0x446>
 8002200:	e0ae      	b.n	8002360 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002202:	2023      	movs	r0, #35	; 0x23
 8002204:	183b      	adds	r3, r7, r0
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220a:	4b8c      	ldr	r3, [pc, #560]	; (800243c <HAL_RCC_OscConfig+0x680>)
 800220c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	055b      	lsls	r3, r3, #21
 8002212:	4013      	ands	r3, r2
 8002214:	d109      	bne.n	800222a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	4b89      	ldr	r3, [pc, #548]	; (800243c <HAL_RCC_OscConfig+0x680>)
 8002218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800221a:	4b88      	ldr	r3, [pc, #544]	; (800243c <HAL_RCC_OscConfig+0x680>)
 800221c:	2180      	movs	r1, #128	; 0x80
 800221e:	0549      	lsls	r1, r1, #21
 8002220:	430a      	orrs	r2, r1
 8002222:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002224:	183b      	adds	r3, r7, r0
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	4b87      	ldr	r3, [pc, #540]	; (8002448 <HAL_RCC_OscConfig+0x68c>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4013      	ands	r3, r2
 8002234:	d11a      	bne.n	800226c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002236:	4b84      	ldr	r3, [pc, #528]	; (8002448 <HAL_RCC_OscConfig+0x68c>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4b83      	ldr	r3, [pc, #524]	; (8002448 <HAL_RCC_OscConfig+0x68c>)
 800223c:	2180      	movs	r1, #128	; 0x80
 800223e:	0049      	lsls	r1, r1, #1
 8002240:	430a      	orrs	r2, r1
 8002242:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002244:	f7ff f9f2 	bl	800162c <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224e:	f7ff f9ed 	bl	800162c <HAL_GetTick>
 8002252:	0002      	movs	r2, r0
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b64      	cmp	r3, #100	; 0x64
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e123      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002260:	4b79      	ldr	r3, [pc, #484]	; (8002448 <HAL_RCC_OscConfig+0x68c>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4013      	ands	r3, r2
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	429a      	cmp	r2, r3
 8002276:	d107      	bne.n	8002288 <HAL_RCC_OscConfig+0x4cc>
 8002278:	4b70      	ldr	r3, [pc, #448]	; (800243c <HAL_RCC_OscConfig+0x680>)
 800227a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800227c:	4b6f      	ldr	r3, [pc, #444]	; (800243c <HAL_RCC_OscConfig+0x680>)
 800227e:	2180      	movs	r1, #128	; 0x80
 8002280:	0049      	lsls	r1, r1, #1
 8002282:	430a      	orrs	r2, r1
 8002284:	651a      	str	r2, [r3, #80]	; 0x50
 8002286:	e031      	b.n	80022ec <HAL_RCC_OscConfig+0x530>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10c      	bne.n	80022aa <HAL_RCC_OscConfig+0x4ee>
 8002290:	4b6a      	ldr	r3, [pc, #424]	; (800243c <HAL_RCC_OscConfig+0x680>)
 8002292:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002294:	4b69      	ldr	r3, [pc, #420]	; (800243c <HAL_RCC_OscConfig+0x680>)
 8002296:	496b      	ldr	r1, [pc, #428]	; (8002444 <HAL_RCC_OscConfig+0x688>)
 8002298:	400a      	ands	r2, r1
 800229a:	651a      	str	r2, [r3, #80]	; 0x50
 800229c:	4b67      	ldr	r3, [pc, #412]	; (800243c <HAL_RCC_OscConfig+0x680>)
 800229e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022a0:	4b66      	ldr	r3, [pc, #408]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80022a2:	496a      	ldr	r1, [pc, #424]	; (800244c <HAL_RCC_OscConfig+0x690>)
 80022a4:	400a      	ands	r2, r1
 80022a6:	651a      	str	r2, [r3, #80]	; 0x50
 80022a8:	e020      	b.n	80022ec <HAL_RCC_OscConfig+0x530>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	23a0      	movs	r3, #160	; 0xa0
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d10e      	bne.n	80022d4 <HAL_RCC_OscConfig+0x518>
 80022b6:	4b61      	ldr	r3, [pc, #388]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80022b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ba:	4b60      	ldr	r3, [pc, #384]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80022bc:	2180      	movs	r1, #128	; 0x80
 80022be:	00c9      	lsls	r1, r1, #3
 80022c0:	430a      	orrs	r2, r1
 80022c2:	651a      	str	r2, [r3, #80]	; 0x50
 80022c4:	4b5d      	ldr	r3, [pc, #372]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80022c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022c8:	4b5c      	ldr	r3, [pc, #368]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80022ca:	2180      	movs	r1, #128	; 0x80
 80022cc:	0049      	lsls	r1, r1, #1
 80022ce:	430a      	orrs	r2, r1
 80022d0:	651a      	str	r2, [r3, #80]	; 0x50
 80022d2:	e00b      	b.n	80022ec <HAL_RCC_OscConfig+0x530>
 80022d4:	4b59      	ldr	r3, [pc, #356]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80022d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022d8:	4b58      	ldr	r3, [pc, #352]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80022da:	495a      	ldr	r1, [pc, #360]	; (8002444 <HAL_RCC_OscConfig+0x688>)
 80022dc:	400a      	ands	r2, r1
 80022de:	651a      	str	r2, [r3, #80]	; 0x50
 80022e0:	4b56      	ldr	r3, [pc, #344]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80022e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022e4:	4b55      	ldr	r3, [pc, #340]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80022e6:	4959      	ldr	r1, [pc, #356]	; (800244c <HAL_RCC_OscConfig+0x690>)
 80022e8:	400a      	ands	r2, r1
 80022ea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d015      	beq.n	8002320 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f4:	f7ff f99a 	bl	800162c <HAL_GetTick>
 80022f8:	0003      	movs	r3, r0
 80022fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022fc:	e009      	b.n	8002312 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fe:	f7ff f995 	bl	800162c <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	4a51      	ldr	r2, [pc, #324]	; (8002450 <HAL_RCC_OscConfig+0x694>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e0ca      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002312:	4b4a      	ldr	r3, [pc, #296]	; (800243c <HAL_RCC_OscConfig+0x680>)
 8002314:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4013      	ands	r3, r2
 800231c:	d0ef      	beq.n	80022fe <HAL_RCC_OscConfig+0x542>
 800231e:	e014      	b.n	800234a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002320:	f7ff f984 	bl	800162c <HAL_GetTick>
 8002324:	0003      	movs	r3, r0
 8002326:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002328:	e009      	b.n	800233e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7ff f97f 	bl	800162c <HAL_GetTick>
 800232e:	0002      	movs	r2, r0
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	4a46      	ldr	r2, [pc, #280]	; (8002450 <HAL_RCC_OscConfig+0x694>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e0b4      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800233e:	4b3f      	ldr	r3, [pc, #252]	; (800243c <HAL_RCC_OscConfig+0x680>)
 8002340:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4013      	ands	r3, r2
 8002348:	d1ef      	bne.n	800232a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800234a:	2323      	movs	r3, #35	; 0x23
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d105      	bne.n	8002360 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002354:	4b39      	ldr	r3, [pc, #228]	; (800243c <HAL_RCC_OscConfig+0x680>)
 8002356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002358:	4b38      	ldr	r3, [pc, #224]	; (800243c <HAL_RCC_OscConfig+0x680>)
 800235a:	493e      	ldr	r1, [pc, #248]	; (8002454 <HAL_RCC_OscConfig+0x698>)
 800235c:	400a      	ands	r2, r1
 800235e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	2b00      	cmp	r3, #0
 8002366:	d100      	bne.n	800236a <HAL_RCC_OscConfig+0x5ae>
 8002368:	e09d      	b.n	80024a6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	2b0c      	cmp	r3, #12
 800236e:	d100      	bne.n	8002372 <HAL_RCC_OscConfig+0x5b6>
 8002370:	e076      	b.n	8002460 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	2b02      	cmp	r3, #2
 8002378:	d145      	bne.n	8002406 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237a:	4b30      	ldr	r3, [pc, #192]	; (800243c <HAL_RCC_OscConfig+0x680>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4b2f      	ldr	r3, [pc, #188]	; (800243c <HAL_RCC_OscConfig+0x680>)
 8002380:	4935      	ldr	r1, [pc, #212]	; (8002458 <HAL_RCC_OscConfig+0x69c>)
 8002382:	400a      	ands	r2, r1
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7ff f951 	bl	800162c <HAL_GetTick>
 800238a:	0003      	movs	r3, r0
 800238c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002390:	f7ff f94c 	bl	800162c <HAL_GetTick>
 8002394:	0002      	movs	r2, r0
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e082      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023a2:	4b26      	ldr	r3, [pc, #152]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	049b      	lsls	r3, r3, #18
 80023aa:	4013      	ands	r3, r2
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ae:	4b23      	ldr	r3, [pc, #140]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	4a2a      	ldr	r2, [pc, #168]	; (800245c <HAL_RCC_OscConfig+0x6a0>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	431a      	orrs	r2, r3
 80023c8:	4b1c      	ldr	r3, [pc, #112]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80023ca:	430a      	orrs	r2, r1
 80023cc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ce:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80023d4:	2180      	movs	r1, #128	; 0x80
 80023d6:	0449      	lsls	r1, r1, #17
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff f926 	bl	800162c <HAL_GetTick>
 80023e0:	0003      	movs	r3, r0
 80023e2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e6:	f7ff f921 	bl	800162c <HAL_GetTick>
 80023ea:	0002      	movs	r2, r0
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e057      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80023f8:	4b10      	ldr	r3, [pc, #64]	; (800243c <HAL_RCC_OscConfig+0x680>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	049b      	lsls	r3, r3, #18
 8002400:	4013      	ands	r3, r2
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x62a>
 8002404:	e04f      	b.n	80024a6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <HAL_RCC_OscConfig+0x680>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <HAL_RCC_OscConfig+0x680>)
 800240c:	4912      	ldr	r1, [pc, #72]	; (8002458 <HAL_RCC_OscConfig+0x69c>)
 800240e:	400a      	ands	r2, r1
 8002410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002412:	f7ff f90b 	bl	800162c <HAL_GetTick>
 8002416:	0003      	movs	r3, r0
 8002418:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241c:	f7ff f906 	bl	800162c <HAL_GetTick>
 8002420:	0002      	movs	r2, r0
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e03c      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800242e:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_RCC_OscConfig+0x680>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	049b      	lsls	r3, r3, #18
 8002436:	4013      	ands	r3, r2
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x660>
 800243a:	e034      	b.n	80024a6 <HAL_RCC_OscConfig+0x6ea>
 800243c:	40021000 	.word	0x40021000
 8002440:	ffff1fff 	.word	0xffff1fff
 8002444:	fffffeff 	.word	0xfffffeff
 8002448:	40007000 	.word	0x40007000
 800244c:	fffffbff 	.word	0xfffffbff
 8002450:	00001388 	.word	0x00001388
 8002454:	efffffff 	.word	0xefffffff
 8002458:	feffffff 	.word	0xfeffffff
 800245c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e01d      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800246c:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <HAL_RCC_OscConfig+0x6f4>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	025b      	lsls	r3, r3, #9
 8002478:	401a      	ands	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247e:	429a      	cmp	r2, r3
 8002480:	d10f      	bne.n	80024a2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	23f0      	movs	r3, #240	; 0xf0
 8002486:	039b      	lsls	r3, r3, #14
 8002488:	401a      	ands	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248e:	429a      	cmp	r2, r3
 8002490:	d107      	bne.n	80024a2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	23c0      	movs	r3, #192	; 0xc0
 8002496:	041b      	lsls	r3, r3, #16
 8002498:	401a      	ands	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800249e:	429a      	cmp	r2, r3
 80024a0:	d001      	beq.n	80024a6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b00a      	add	sp, #40	; 0x28
 80024ae:	bdb0      	pop	{r4, r5, r7, pc}
 80024b0:	40021000 	.word	0x40021000

080024b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b4:	b5b0      	push	{r4, r5, r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e128      	b.n	800271a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c8:	4b96      	ldr	r3, [pc, #600]	; (8002724 <HAL_RCC_ClockConfig+0x270>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2201      	movs	r2, #1
 80024ce:	4013      	ands	r3, r2
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d91e      	bls.n	8002514 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b93      	ldr	r3, [pc, #588]	; (8002724 <HAL_RCC_ClockConfig+0x270>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2201      	movs	r2, #1
 80024dc:	4393      	bics	r3, r2
 80024de:	0019      	movs	r1, r3
 80024e0:	4b90      	ldr	r3, [pc, #576]	; (8002724 <HAL_RCC_ClockConfig+0x270>)
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024e8:	f7ff f8a0 	bl	800162c <HAL_GetTick>
 80024ec:	0003      	movs	r3, r0
 80024ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f0:	e009      	b.n	8002506 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f2:	f7ff f89b 	bl	800162c <HAL_GetTick>
 80024f6:	0002      	movs	r2, r0
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	4a8a      	ldr	r2, [pc, #552]	; (8002728 <HAL_RCC_ClockConfig+0x274>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e109      	b.n	800271a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	4b87      	ldr	r3, [pc, #540]	; (8002724 <HAL_RCC_ClockConfig+0x270>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2201      	movs	r2, #1
 800250c:	4013      	ands	r3, r2
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d1ee      	bne.n	80024f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2202      	movs	r2, #2
 800251a:	4013      	ands	r3, r2
 800251c:	d009      	beq.n	8002532 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800251e:	4b83      	ldr	r3, [pc, #524]	; (800272c <HAL_RCC_ClockConfig+0x278>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	22f0      	movs	r2, #240	; 0xf0
 8002524:	4393      	bics	r3, r2
 8002526:	0019      	movs	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	4b7f      	ldr	r3, [pc, #508]	; (800272c <HAL_RCC_ClockConfig+0x278>)
 800252e:	430a      	orrs	r2, r1
 8002530:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2201      	movs	r2, #1
 8002538:	4013      	ands	r3, r2
 800253a:	d100      	bne.n	800253e <HAL_RCC_ClockConfig+0x8a>
 800253c:	e089      	b.n	8002652 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d107      	bne.n	8002556 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002546:	4b79      	ldr	r3, [pc, #484]	; (800272c <HAL_RCC_ClockConfig+0x278>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	029b      	lsls	r3, r3, #10
 800254e:	4013      	ands	r3, r2
 8002550:	d120      	bne.n	8002594 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e0e1      	b.n	800271a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d107      	bne.n	800256e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800255e:	4b73      	ldr	r3, [pc, #460]	; (800272c <HAL_RCC_ClockConfig+0x278>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	2380      	movs	r3, #128	; 0x80
 8002564:	049b      	lsls	r3, r3, #18
 8002566:	4013      	ands	r3, r2
 8002568:	d114      	bne.n	8002594 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e0d5      	b.n	800271a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d106      	bne.n	8002584 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002576:	4b6d      	ldr	r3, [pc, #436]	; (800272c <HAL_RCC_ClockConfig+0x278>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2204      	movs	r2, #4
 800257c:	4013      	ands	r3, r2
 800257e:	d109      	bne.n	8002594 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0ca      	b.n	800271a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002584:	4b69      	ldr	r3, [pc, #420]	; (800272c <HAL_RCC_ClockConfig+0x278>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4013      	ands	r3, r2
 800258e:	d101      	bne.n	8002594 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0c2      	b.n	800271a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002594:	4b65      	ldr	r3, [pc, #404]	; (800272c <HAL_RCC_ClockConfig+0x278>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2203      	movs	r2, #3
 800259a:	4393      	bics	r3, r2
 800259c:	0019      	movs	r1, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	4b62      	ldr	r3, [pc, #392]	; (800272c <HAL_RCC_ClockConfig+0x278>)
 80025a4:	430a      	orrs	r2, r1
 80025a6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a8:	f7ff f840 	bl	800162c <HAL_GetTick>
 80025ac:	0003      	movs	r3, r0
 80025ae:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d111      	bne.n	80025dc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025b8:	e009      	b.n	80025ce <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ba:	f7ff f837 	bl	800162c <HAL_GetTick>
 80025be:	0002      	movs	r2, r0
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	4a58      	ldr	r2, [pc, #352]	; (8002728 <HAL_RCC_ClockConfig+0x274>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e0a5      	b.n	800271a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025ce:	4b57      	ldr	r3, [pc, #348]	; (800272c <HAL_RCC_ClockConfig+0x278>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	220c      	movs	r2, #12
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d1ef      	bne.n	80025ba <HAL_RCC_ClockConfig+0x106>
 80025da:	e03a      	b.n	8002652 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d111      	bne.n	8002608 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e4:	e009      	b.n	80025fa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e6:	f7ff f821 	bl	800162c <HAL_GetTick>
 80025ea:	0002      	movs	r2, r0
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	4a4d      	ldr	r2, [pc, #308]	; (8002728 <HAL_RCC_ClockConfig+0x274>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e08f      	b.n	800271a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025fa:	4b4c      	ldr	r3, [pc, #304]	; (800272c <HAL_RCC_ClockConfig+0x278>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	220c      	movs	r2, #12
 8002600:	4013      	ands	r3, r2
 8002602:	2b0c      	cmp	r3, #12
 8002604:	d1ef      	bne.n	80025e6 <HAL_RCC_ClockConfig+0x132>
 8002606:	e024      	b.n	8002652 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d11b      	bne.n	8002648 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002610:	e009      	b.n	8002626 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002612:	f7ff f80b 	bl	800162c <HAL_GetTick>
 8002616:	0002      	movs	r2, r0
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	4a42      	ldr	r2, [pc, #264]	; (8002728 <HAL_RCC_ClockConfig+0x274>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e079      	b.n	800271a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002626:	4b41      	ldr	r3, [pc, #260]	; (800272c <HAL_RCC_ClockConfig+0x278>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	220c      	movs	r2, #12
 800262c:	4013      	ands	r3, r2
 800262e:	2b04      	cmp	r3, #4
 8002630:	d1ef      	bne.n	8002612 <HAL_RCC_ClockConfig+0x15e>
 8002632:	e00e      	b.n	8002652 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002634:	f7fe fffa 	bl	800162c <HAL_GetTick>
 8002638:	0002      	movs	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	4a3a      	ldr	r2, [pc, #232]	; (8002728 <HAL_RCC_ClockConfig+0x274>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e068      	b.n	800271a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002648:	4b38      	ldr	r3, [pc, #224]	; (800272c <HAL_RCC_ClockConfig+0x278>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	220c      	movs	r2, #12
 800264e:	4013      	ands	r3, r2
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002652:	4b34      	ldr	r3, [pc, #208]	; (8002724 <HAL_RCC_ClockConfig+0x270>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2201      	movs	r2, #1
 8002658:	4013      	ands	r3, r2
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d21e      	bcs.n	800269e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002660:	4b30      	ldr	r3, [pc, #192]	; (8002724 <HAL_RCC_ClockConfig+0x270>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2201      	movs	r2, #1
 8002666:	4393      	bics	r3, r2
 8002668:	0019      	movs	r1, r3
 800266a:	4b2e      	ldr	r3, [pc, #184]	; (8002724 <HAL_RCC_ClockConfig+0x270>)
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002672:	f7fe ffdb 	bl	800162c <HAL_GetTick>
 8002676:	0003      	movs	r3, r0
 8002678:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	e009      	b.n	8002690 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267c:	f7fe ffd6 	bl	800162c <HAL_GetTick>
 8002680:	0002      	movs	r2, r0
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	4a28      	ldr	r2, [pc, #160]	; (8002728 <HAL_RCC_ClockConfig+0x274>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e044      	b.n	800271a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002690:	4b24      	ldr	r3, [pc, #144]	; (8002724 <HAL_RCC_ClockConfig+0x270>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2201      	movs	r2, #1
 8002696:	4013      	ands	r3, r2
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d1ee      	bne.n	800267c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2204      	movs	r2, #4
 80026a4:	4013      	ands	r3, r2
 80026a6:	d009      	beq.n	80026bc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a8:	4b20      	ldr	r3, [pc, #128]	; (800272c <HAL_RCC_ClockConfig+0x278>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4a20      	ldr	r2, [pc, #128]	; (8002730 <HAL_RCC_ClockConfig+0x27c>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	0019      	movs	r1, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	4b1d      	ldr	r3, [pc, #116]	; (800272c <HAL_RCC_ClockConfig+0x278>)
 80026b8:	430a      	orrs	r2, r1
 80026ba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2208      	movs	r2, #8
 80026c2:	4013      	ands	r3, r2
 80026c4:	d00a      	beq.n	80026dc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026c6:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_RCC_ClockConfig+0x278>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	4a1a      	ldr	r2, [pc, #104]	; (8002734 <HAL_RCC_ClockConfig+0x280>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	0019      	movs	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	00da      	lsls	r2, r3, #3
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_RCC_ClockConfig+0x278>)
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026dc:	f000 f832 	bl	8002744 <HAL_RCC_GetSysClockFreq>
 80026e0:	0001      	movs	r1, r0
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_RCC_ClockConfig+0x278>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	220f      	movs	r2, #15
 80026ea:	4013      	ands	r3, r2
 80026ec:	4a12      	ldr	r2, [pc, #72]	; (8002738 <HAL_RCC_ClockConfig+0x284>)
 80026ee:	5cd3      	ldrb	r3, [r2, r3]
 80026f0:	000a      	movs	r2, r1
 80026f2:	40da      	lsrs	r2, r3
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <HAL_RCC_ClockConfig+0x288>)
 80026f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026f8:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_RCC_ClockConfig+0x28c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	250b      	movs	r5, #11
 80026fe:	197c      	adds	r4, r7, r5
 8002700:	0018      	movs	r0, r3
 8002702:	f7fe ff4d 	bl	80015a0 <HAL_InitTick>
 8002706:	0003      	movs	r3, r0
 8002708:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800270a:	197b      	adds	r3, r7, r5
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002712:	197b      	adds	r3, r7, r5
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	e000      	b.n	800271a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	0018      	movs	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	b004      	add	sp, #16
 8002720:	bdb0      	pop	{r4, r5, r7, pc}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	40022000 	.word	0x40022000
 8002728:	00001388 	.word	0x00001388
 800272c:	40021000 	.word	0x40021000
 8002730:	fffff8ff 	.word	0xfffff8ff
 8002734:	ffffc7ff 	.word	0xffffc7ff
 8002738:	08003b14 	.word	0x08003b14
 800273c:	20000000 	.word	0x20000000
 8002740:	20000004 	.word	0x20000004

08002744 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002744:	b5b0      	push	{r4, r5, r7, lr}
 8002746:	b08e      	sub	sp, #56	; 0x38
 8002748:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800274a:	4b4c      	ldr	r3, [pc, #304]	; (800287c <HAL_RCC_GetSysClockFreq+0x138>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002752:	230c      	movs	r3, #12
 8002754:	4013      	ands	r3, r2
 8002756:	2b0c      	cmp	r3, #12
 8002758:	d014      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x40>
 800275a:	d900      	bls.n	800275e <HAL_RCC_GetSysClockFreq+0x1a>
 800275c:	e07b      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x112>
 800275e:	2b04      	cmp	r3, #4
 8002760:	d002      	beq.n	8002768 <HAL_RCC_GetSysClockFreq+0x24>
 8002762:	2b08      	cmp	r3, #8
 8002764:	d00b      	beq.n	800277e <HAL_RCC_GetSysClockFreq+0x3a>
 8002766:	e076      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002768:	4b44      	ldr	r3, [pc, #272]	; (800287c <HAL_RCC_GetSysClockFreq+0x138>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2210      	movs	r2, #16
 800276e:	4013      	ands	r3, r2
 8002770:	d002      	beq.n	8002778 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002772:	4b43      	ldr	r3, [pc, #268]	; (8002880 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002774:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002776:	e07c      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002778:	4b42      	ldr	r3, [pc, #264]	; (8002884 <HAL_RCC_GetSysClockFreq+0x140>)
 800277a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800277c:	e079      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800277e:	4b42      	ldr	r3, [pc, #264]	; (8002888 <HAL_RCC_GetSysClockFreq+0x144>)
 8002780:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002782:	e076      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002786:	0c9a      	lsrs	r2, r3, #18
 8002788:	230f      	movs	r3, #15
 800278a:	401a      	ands	r2, r3
 800278c:	4b3f      	ldr	r3, [pc, #252]	; (800288c <HAL_RCC_GetSysClockFreq+0x148>)
 800278e:	5c9b      	ldrb	r3, [r3, r2]
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	0d9a      	lsrs	r2, r3, #22
 8002796:	2303      	movs	r3, #3
 8002798:	4013      	ands	r3, r2
 800279a:	3301      	adds	r3, #1
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800279e:	4b37      	ldr	r3, [pc, #220]	; (800287c <HAL_RCC_GetSysClockFreq+0x138>)
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	025b      	lsls	r3, r3, #9
 80027a6:	4013      	ands	r3, r2
 80027a8:	d01a      	beq.n	80027e0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80027aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	4a35      	ldr	r2, [pc, #212]	; (8002888 <HAL_RCC_GetSysClockFreq+0x144>)
 80027b4:	2300      	movs	r3, #0
 80027b6:	69b8      	ldr	r0, [r7, #24]
 80027b8:	69f9      	ldr	r1, [r7, #28]
 80027ba:	f7fd fd51 	bl	8000260 <__aeabi_lmul>
 80027be:	0002      	movs	r2, r0
 80027c0:	000b      	movs	r3, r1
 80027c2:	0010      	movs	r0, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f7fd fd25 	bl	8000220 <__aeabi_uldivmod>
 80027d6:	0002      	movs	r2, r0
 80027d8:	000b      	movs	r3, r1
 80027da:	0013      	movs	r3, r2
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
 80027de:	e037      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80027e0:	4b26      	ldr	r3, [pc, #152]	; (800287c <HAL_RCC_GetSysClockFreq+0x138>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2210      	movs	r2, #16
 80027e6:	4013      	ands	r3, r2
 80027e8:	d01a      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	4a23      	ldr	r2, [pc, #140]	; (8002880 <HAL_RCC_GetSysClockFreq+0x13c>)
 80027f4:	2300      	movs	r3, #0
 80027f6:	68b8      	ldr	r0, [r7, #8]
 80027f8:	68f9      	ldr	r1, [r7, #12]
 80027fa:	f7fd fd31 	bl	8000260 <__aeabi_lmul>
 80027fe:	0002      	movs	r2, r0
 8002800:	000b      	movs	r3, r1
 8002802:	0010      	movs	r0, r2
 8002804:	0019      	movs	r1, r3
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	603b      	str	r3, [r7, #0]
 800280a:	2300      	movs	r3, #0
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f7fd fd05 	bl	8000220 <__aeabi_uldivmod>
 8002816:	0002      	movs	r2, r0
 8002818:	000b      	movs	r3, r1
 800281a:	0013      	movs	r3, r2
 800281c:	637b      	str	r3, [r7, #52]	; 0x34
 800281e:	e017      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	0018      	movs	r0, r3
 8002824:	2300      	movs	r3, #0
 8002826:	0019      	movs	r1, r3
 8002828:	4a16      	ldr	r2, [pc, #88]	; (8002884 <HAL_RCC_GetSysClockFreq+0x140>)
 800282a:	2300      	movs	r3, #0
 800282c:	f7fd fd18 	bl	8000260 <__aeabi_lmul>
 8002830:	0002      	movs	r2, r0
 8002832:	000b      	movs	r3, r1
 8002834:	0010      	movs	r0, r2
 8002836:	0019      	movs	r1, r3
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	001c      	movs	r4, r3
 800283c:	2300      	movs	r3, #0
 800283e:	001d      	movs	r5, r3
 8002840:	0022      	movs	r2, r4
 8002842:	002b      	movs	r3, r5
 8002844:	f7fd fcec 	bl	8000220 <__aeabi_uldivmod>
 8002848:	0002      	movs	r2, r0
 800284a:	000b      	movs	r3, r1
 800284c:	0013      	movs	r3, r2
 800284e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002852:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002854:	e00d      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_RCC_GetSysClockFreq+0x138>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	0b5b      	lsrs	r3, r3, #13
 800285c:	2207      	movs	r2, #7
 800285e:	4013      	ands	r3, r2
 8002860:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	3301      	adds	r3, #1
 8002866:	2280      	movs	r2, #128	; 0x80
 8002868:	0212      	lsls	r2, r2, #8
 800286a:	409a      	lsls	r2, r3
 800286c:	0013      	movs	r3, r2
 800286e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002870:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b00e      	add	sp, #56	; 0x38
 800287a:	bdb0      	pop	{r4, r5, r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	003d0900 	.word	0x003d0900
 8002884:	00f42400 	.word	0x00f42400
 8002888:	007a1200 	.word	0x007a1200
 800288c:	08003b2c 	.word	0x08003b2c

08002890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002894:	4b02      	ldr	r3, [pc, #8]	; (80028a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002896:	681b      	ldr	r3, [r3, #0]
}
 8002898:	0018      	movs	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	20000000 	.word	0x20000000

080028a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028a8:	f7ff fff2 	bl	8002890 <HAL_RCC_GetHCLKFreq>
 80028ac:	0001      	movs	r1, r0
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	2207      	movs	r2, #7
 80028b6:	4013      	ands	r3, r2
 80028b8:	4a04      	ldr	r2, [pc, #16]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ba:	5cd3      	ldrb	r3, [r2, r3]
 80028bc:	40d9      	lsrs	r1, r3
 80028be:	000b      	movs	r3, r1
}
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	40021000 	.word	0x40021000
 80028cc:	08003b24 	.word	0x08003b24

080028d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028d4:	f7ff ffdc 	bl	8002890 <HAL_RCC_GetHCLKFreq>
 80028d8:	0001      	movs	r1, r0
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	0adb      	lsrs	r3, r3, #11
 80028e0:	2207      	movs	r2, #7
 80028e2:	4013      	ands	r3, r2
 80028e4:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028e6:	5cd3      	ldrb	r3, [r2, r3]
 80028e8:	40d9      	lsrs	r1, r3
 80028ea:	000b      	movs	r3, r1
}
 80028ec:	0018      	movs	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	40021000 	.word	0x40021000
 80028f8:	08003b24 	.word	0x08003b24

080028fc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002904:	2017      	movs	r0, #23
 8002906:	183b      	adds	r3, r7, r0
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2220      	movs	r2, #32
 8002912:	4013      	ands	r3, r2
 8002914:	d100      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002916:	e0c2      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002918:	4b91      	ldr	r3, [pc, #580]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800291a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	055b      	lsls	r3, r3, #21
 8002920:	4013      	ands	r3, r2
 8002922:	d109      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002924:	4b8e      	ldr	r3, [pc, #568]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002928:	4b8d      	ldr	r3, [pc, #564]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800292a:	2180      	movs	r1, #128	; 0x80
 800292c:	0549      	lsls	r1, r1, #21
 800292e:	430a      	orrs	r2, r1
 8002930:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002932:	183b      	adds	r3, r7, r0
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	4b8a      	ldr	r3, [pc, #552]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4013      	ands	r3, r2
 8002942:	d11a      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002944:	4b87      	ldr	r3, [pc, #540]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b86      	ldr	r3, [pc, #536]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800294a:	2180      	movs	r1, #128	; 0x80
 800294c:	0049      	lsls	r1, r1, #1
 800294e:	430a      	orrs	r2, r1
 8002950:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002952:	f7fe fe6b 	bl	800162c <HAL_GetTick>
 8002956:	0003      	movs	r3, r0
 8002958:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295a:	e008      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295c:	f7fe fe66 	bl	800162c <HAL_GetTick>
 8002960:	0002      	movs	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e0f3      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296e:	4b7d      	ldr	r3, [pc, #500]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	2380      	movs	r3, #128	; 0x80
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4013      	ands	r3, r2
 8002978:	d0f0      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800297a:	4b79      	ldr	r3, [pc, #484]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	23c0      	movs	r3, #192	; 0xc0
 8002980:	039b      	lsls	r3, r3, #14
 8002982:	4013      	ands	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	23c0      	movs	r3, #192	; 0xc0
 800298c:	039b      	lsls	r3, r3, #14
 800298e:	4013      	ands	r3, r2
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	429a      	cmp	r2, r3
 8002994:	d013      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	23c0      	movs	r3, #192	; 0xc0
 800299c:	029b      	lsls	r3, r3, #10
 800299e:	401a      	ands	r2, r3
 80029a0:	23c0      	movs	r3, #192	; 0xc0
 80029a2:	029b      	lsls	r3, r3, #10
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d10a      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80029a8:	4b6d      	ldr	r3, [pc, #436]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	029b      	lsls	r3, r3, #10
 80029b0:	401a      	ands	r2, r3
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	029b      	lsls	r3, r3, #10
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d101      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0cb      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80029be:	4b68      	ldr	r3, [pc, #416]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029c2:	23c0      	movs	r3, #192	; 0xc0
 80029c4:	029b      	lsls	r3, r3, #10
 80029c6:	4013      	ands	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d03b      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	23c0      	movs	r3, #192	; 0xc0
 80029d6:	029b      	lsls	r3, r3, #10
 80029d8:	4013      	ands	r3, r2
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d033      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2220      	movs	r2, #32
 80029e6:	4013      	ands	r3, r2
 80029e8:	d02e      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80029ea:	4b5d      	ldr	r3, [pc, #372]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ee:	4a5e      	ldr	r2, [pc, #376]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029f4:	4b5a      	ldr	r3, [pc, #360]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029f8:	4b59      	ldr	r3, [pc, #356]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	0309      	lsls	r1, r1, #12
 80029fe:	430a      	orrs	r2, r1
 8002a00:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a02:	4b57      	ldr	r3, [pc, #348]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a06:	4b56      	ldr	r3, [pc, #344]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a08:	4958      	ldr	r1, [pc, #352]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002a0a:	400a      	ands	r2, r1
 8002a0c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002a0e:	4b54      	ldr	r3, [pc, #336]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d014      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fe05 	bl	800162c <HAL_GetTick>
 8002a22:	0003      	movs	r3, r0
 8002a24:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a26:	e009      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a28:	f7fe fe00 	bl	800162c <HAL_GetTick>
 8002a2c:	0002      	movs	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	4a4f      	ldr	r2, [pc, #316]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e08c      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a3c:	4b48      	ldr	r3, [pc, #288]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4013      	ands	r3, r2
 8002a46:	d0ef      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	23c0      	movs	r3, #192	; 0xc0
 8002a4e:	029b      	lsls	r3, r3, #10
 8002a50:	401a      	ands	r2, r3
 8002a52:	23c0      	movs	r3, #192	; 0xc0
 8002a54:	029b      	lsls	r3, r3, #10
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002a5a:	4b41      	ldr	r3, [pc, #260]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a45      	ldr	r2, [pc, #276]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	0019      	movs	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	23c0      	movs	r3, #192	; 0xc0
 8002a6a:	039b      	lsls	r3, r3, #14
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	4b3c      	ldr	r3, [pc, #240]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a70:	430a      	orrs	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	4b3a      	ldr	r3, [pc, #232]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a76:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	23c0      	movs	r3, #192	; 0xc0
 8002a7e:	029b      	lsls	r3, r3, #10
 8002a80:	401a      	ands	r2, r3
 8002a82:	4b37      	ldr	r3, [pc, #220]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a84:	430a      	orrs	r2, r1
 8002a86:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a88:	2317      	movs	r3, #23
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d105      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a92:	4b33      	ldr	r3, [pc, #204]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a96:	4b32      	ldr	r3, [pc, #200]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a98:	4937      	ldr	r1, [pc, #220]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d009      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aa8:	4b2d      	ldr	r3, [pc, #180]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aac:	2203      	movs	r2, #3
 8002aae:	4393      	bics	r3, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	4b2a      	ldr	r3, [pc, #168]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d009      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ac6:	4b26      	ldr	r3, [pc, #152]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aca:	220c      	movs	r2, #12
 8002acc:	4393      	bics	r3, r2
 8002ace:	0019      	movs	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2204      	movs	r2, #4
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d009      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ae4:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae8:	4a24      	ldr	r2, [pc, #144]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002af4:	430a      	orrs	r2, r1
 8002af6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2208      	movs	r2, #8
 8002afe:	4013      	ands	r3, r2
 8002b00:	d009      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b06:	4a1e      	ldr	r2, [pc, #120]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b12:	430a      	orrs	r2, r1
 8002b14:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	2380      	movs	r3, #128	; 0x80
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d009      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b22:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b26:	4a10      	ldr	r2, [pc, #64]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699a      	ldr	r2, [r3, #24]
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b32:	430a      	orrs	r2, r1
 8002b34:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2280      	movs	r2, #128	; 0x80
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d009      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002b40:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b44:	4a0f      	ldr	r2, [pc, #60]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	0019      	movs	r1, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b50:	430a      	orrs	r2, r1
 8002b52:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	0018      	movs	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b006      	add	sp, #24
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40007000 	.word	0x40007000
 8002b68:	fffcffff 	.word	0xfffcffff
 8002b6c:	fff7ffff 	.word	0xfff7ffff
 8002b70:	00001388 	.word	0x00001388
 8002b74:	ffcfffff 	.word	0xffcfffff
 8002b78:	efffffff 	.word	0xefffffff
 8002b7c:	fffff3ff 	.word	0xfffff3ff
 8002b80:	ffffcfff 	.word	0xffffcfff
 8002b84:	fff3ffff 	.word	0xfff3ffff

08002b88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e083      	b.n	8002ca2 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	2382      	movs	r3, #130	; 0x82
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d009      	beq.n	8002bc2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	61da      	str	r2, [r3, #28]
 8002bb4:	e005      	b.n	8002bc2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2251      	movs	r2, #81	; 0x51
 8002bcc:	5c9b      	ldrb	r3, [r3, r2]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d107      	bne.n	8002be4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2250      	movs	r2, #80	; 0x50
 8002bd8:	2100      	movs	r1, #0
 8002bda:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	0018      	movs	r0, r3
 8002be0:	f7fd ff2e 	bl	8000a40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2251      	movs	r2, #81	; 0x51
 8002be8:	2102      	movs	r1, #2
 8002bea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2140      	movs	r1, #64	; 0x40
 8002bf8:	438a      	bics	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	2382      	movs	r3, #130	; 0x82
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	401a      	ands	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6899      	ldr	r1, [r3, #8]
 8002c0a:	2384      	movs	r3, #132	; 0x84
 8002c0c:	021b      	lsls	r3, r3, #8
 8002c0e:	400b      	ands	r3, r1
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68d9      	ldr	r1, [r3, #12]
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	400b      	ands	r3, r1
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	2102      	movs	r1, #2
 8002c24:	400b      	ands	r3, r1
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	400b      	ands	r3, r1
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6999      	ldr	r1, [r3, #24]
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	400b      	ands	r3, r1
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	2138      	movs	r1, #56	; 0x38
 8002c44:	400b      	ands	r3, r1
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	2180      	movs	r1, #128	; 0x80
 8002c4e:	400b      	ands	r3, r1
 8002c50:	431a      	orrs	r2, r3
 8002c52:	0011      	movs	r1, r2
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	019b      	lsls	r3, r3, #6
 8002c5c:	401a      	ands	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	0c1b      	lsrs	r3, r3, #16
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	4013      	ands	r3, r2
 8002c70:	0019      	movs	r1, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2210      	movs	r2, #16
 8002c78:	401a      	ands	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69da      	ldr	r2, [r3, #28]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4907      	ldr	r1, [pc, #28]	; (8002cac <HAL_SPI_Init+0x124>)
 8002c8e:	400a      	ands	r2, r1
 8002c90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2251      	movs	r2, #81	; 0x51
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b002      	add	sp, #8
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	fffff7ff 	.word	0xfffff7ff

08002cb0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	1dbb      	adds	r3, r7, #6
 8002cbe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cc0:	231f      	movs	r3, #31
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2250      	movs	r2, #80	; 0x50
 8002ccc:	5c9b      	ldrb	r3, [r3, r2]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_SPI_Transmit+0x26>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e13e      	b.n	8002f54 <HAL_SPI_Transmit+0x2a4>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2250      	movs	r2, #80	; 0x50
 8002cda:	2101      	movs	r1, #1
 8002cdc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cde:	f7fe fca5 	bl	800162c <HAL_GetTick>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002ce6:	2316      	movs	r3, #22
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	1dba      	adds	r2, r7, #6
 8002cec:	8812      	ldrh	r2, [r2, #0]
 8002cee:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2251      	movs	r2, #81	; 0x51
 8002cf4:	5c9b      	ldrb	r3, [r3, r2]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d004      	beq.n	8002d06 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002cfc:	231f      	movs	r3, #31
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	2202      	movs	r2, #2
 8002d02:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d04:	e11b      	b.n	8002f3e <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_SPI_Transmit+0x64>
 8002d0c:	1dbb      	adds	r3, r7, #6
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d104      	bne.n	8002d1e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002d14:	231f      	movs	r3, #31
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	2201      	movs	r2, #1
 8002d1a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d1c:	e10f      	b.n	8002f3e <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2251      	movs	r2, #81	; 0x51
 8002d22:	2103      	movs	r1, #3
 8002d24:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1dba      	adds	r2, r7, #6
 8002d36:	8812      	ldrh	r2, [r2, #0]
 8002d38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1dba      	adds	r2, r7, #6
 8002d3e:	8812      	ldrh	r2, [r2, #0]
 8002d40:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d110      	bne.n	8002d8e <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2140      	movs	r1, #64	; 0x40
 8002d78:	438a      	bics	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2180      	movs	r1, #128	; 0x80
 8002d88:	01c9      	lsls	r1, r1, #7
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2240      	movs	r2, #64	; 0x40
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b40      	cmp	r3, #64	; 0x40
 8002d9a:	d007      	beq.n	8002dac <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2140      	movs	r1, #64	; 0x40
 8002da8:	430a      	orrs	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d14e      	bne.n	8002e56 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <HAL_SPI_Transmit+0x11a>
 8002dc0:	2316      	movs	r3, #22
 8002dc2:	18fb      	adds	r3, r7, r3
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d13f      	bne.n	8002e4a <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	881a      	ldrh	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	1c9a      	adds	r2, r3, #2
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dee:	e02c      	b.n	8002e4a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2202      	movs	r2, #2
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d112      	bne.n	8002e24 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	881a      	ldrh	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	1c9a      	adds	r2, r3, #2
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e22:	e012      	b.n	8002e4a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e24:	f7fe fc02 	bl	800162c <HAL_GetTick>
 8002e28:	0002      	movs	r2, r0
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d802      	bhi.n	8002e3a <HAL_SPI_Transmit+0x18a>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	3301      	adds	r3, #1
 8002e38:	d102      	bne.n	8002e40 <HAL_SPI_Transmit+0x190>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d104      	bne.n	8002e4a <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8002e40:	231f      	movs	r3, #31
 8002e42:	18fb      	adds	r3, r7, r3
 8002e44:	2203      	movs	r2, #3
 8002e46:	701a      	strb	r2, [r3, #0]
          goto error;
 8002e48:	e079      	b.n	8002f3e <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1cd      	bne.n	8002df0 <HAL_SPI_Transmit+0x140>
 8002e54:	e04f      	b.n	8002ef6 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d004      	beq.n	8002e68 <HAL_SPI_Transmit+0x1b8>
 8002e5e:	2316      	movs	r3, #22
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d141      	bne.n	8002eec <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	330c      	adds	r3, #12
 8002e72:	7812      	ldrb	r2, [r2, #0]
 8002e74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e8e:	e02d      	b.n	8002eec <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2202      	movs	r2, #2
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d113      	bne.n	8002ec6 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	330c      	adds	r3, #12
 8002ea8:	7812      	ldrb	r2, [r2, #0]
 8002eaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ec4:	e012      	b.n	8002eec <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ec6:	f7fe fbb1 	bl	800162c <HAL_GetTick>
 8002eca:	0002      	movs	r2, r0
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d802      	bhi.n	8002edc <HAL_SPI_Transmit+0x22c>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	d102      	bne.n	8002ee2 <HAL_SPI_Transmit+0x232>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d104      	bne.n	8002eec <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8002ee2:	231f      	movs	r3, #31
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	701a      	strb	r2, [r3, #0]
          goto error;
 8002eea:	e028      	b.n	8002f3e <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1cc      	bne.n	8002e90 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	6839      	ldr	r1, [r7, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	0018      	movs	r0, r3
 8002efe:	f000 f8bb 	bl	8003078 <SPI_EndRxTxTransaction>
 8002f02:	1e03      	subs	r3, r0, #0
 8002f04:	d002      	beq.n	8002f0c <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10a      	bne.n	8002f2a <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f14:	2300      	movs	r3, #0
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d004      	beq.n	8002f3c <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8002f32:	231f      	movs	r3, #31
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	e000      	b.n	8002f3e <HAL_SPI_Transmit+0x28e>
  }

error:
 8002f3c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2251      	movs	r2, #81	; 0x51
 8002f42:	2101      	movs	r1, #1
 8002f44:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2250      	movs	r2, #80	; 0x50
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002f4e:	231f      	movs	r3, #31
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	781b      	ldrb	r3, [r3, #0]
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b008      	add	sp, #32
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	1dfb      	adds	r3, r7, #7
 8002f6a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f6c:	f7fe fb5e 	bl	800162c <HAL_GetTick>
 8002f70:	0002      	movs	r2, r0
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	18d3      	adds	r3, r2, r3
 8002f7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f7c:	f7fe fb56 	bl	800162c <HAL_GetTick>
 8002f80:	0003      	movs	r3, r0
 8002f82:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f84:	4b3a      	ldr	r3, [pc, #232]	; (8003070 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	015b      	lsls	r3, r3, #5
 8002f8a:	0d1b      	lsrs	r3, r3, #20
 8002f8c:	69fa      	ldr	r2, [r7, #28]
 8002f8e:	4353      	muls	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f92:	e058      	b.n	8003046 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	3301      	adds	r3, #1
 8002f98:	d055      	beq.n	8003046 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f9a:	f7fe fb47 	bl	800162c <HAL_GetTick>
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d902      	bls.n	8002fb0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d142      	bne.n	8003036 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	21e0      	movs	r1, #224	; 0xe0
 8002fbc:	438a      	bics	r2, r1
 8002fbe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	2382      	movs	r3, #130	; 0x82
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d113      	bne.n	8002ff4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d005      	beq.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d107      	bne.n	8002ff4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2140      	movs	r1, #64	; 0x40
 8002ff0:	438a      	bics	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	019b      	lsls	r3, r3, #6
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d110      	bne.n	8003022 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	491a      	ldr	r1, [pc, #104]	; (8003074 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800300c:	400a      	ands	r2, r1
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	0189      	lsls	r1, r1, #6
 800301e:	430a      	orrs	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2251      	movs	r2, #81	; 0x51
 8003026:	2101      	movs	r1, #1
 8003028:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2250      	movs	r2, #80	; 0x50
 800302e:	2100      	movs	r1, #0
 8003030:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e017      	b.n	8003066 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	3b01      	subs	r3, #1
 8003044:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	4013      	ands	r3, r2
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	425a      	negs	r2, r3
 8003056:	4153      	adcs	r3, r2
 8003058:	b2db      	uxtb	r3, r3
 800305a:	001a      	movs	r2, r3
 800305c:	1dfb      	adds	r3, r7, #7
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d197      	bne.n	8002f94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	0018      	movs	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	b008      	add	sp, #32
 800306c:	bd80      	pop	{r7, pc}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	20000000 	.word	0x20000000
 8003074:	ffffdfff 	.word	0xffffdfff

08003078 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af02      	add	r7, sp, #8
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003084:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <SPI_EndRxTxTransaction+0x84>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	491d      	ldr	r1, [pc, #116]	; (8003100 <SPI_EndRxTxTransaction+0x88>)
 800308a:	0018      	movs	r0, r3
 800308c:	f7fd f83c 	bl	8000108 <__udivsi3>
 8003090:	0003      	movs	r3, r0
 8003092:	001a      	movs	r2, r3
 8003094:	0013      	movs	r3, r2
 8003096:	015b      	lsls	r3, r3, #5
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	189b      	adds	r3, r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	2382      	movs	r3, #130	; 0x82
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d112      	bne.n	80030d4 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	0013      	movs	r3, r2
 80030b8:	2200      	movs	r2, #0
 80030ba:	2180      	movs	r1, #128	; 0x80
 80030bc:	f7ff ff4e 	bl	8002f5c <SPI_WaitFlagStateUntilTimeout>
 80030c0:	1e03      	subs	r3, r0, #0
 80030c2:	d016      	beq.n	80030f2 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c8:	2220      	movs	r2, #32
 80030ca:	431a      	orrs	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e00f      	b.n	80030f4 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	3b01      	subs	r3, #1
 80030de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2280      	movs	r2, #128	; 0x80
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b80      	cmp	r3, #128	; 0x80
 80030ec:	d0f2      	beq.n	80030d4 <SPI_EndRxTxTransaction+0x5c>
 80030ee:	e000      	b.n	80030f2 <SPI_EndRxTxTransaction+0x7a>
        break;
 80030f0:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	0018      	movs	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b006      	add	sp, #24
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000000 	.word	0x20000000
 8003100:	016e3600 	.word	0x016e3600

08003104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003104:	b5b0      	push	{r4, r5, r7, lr}
 8003106:	b08e      	sub	sp, #56	; 0x38
 8003108:	af00      	add	r7, sp, #0
 800310a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800310c:	231a      	movs	r3, #26
 800310e:	2218      	movs	r2, #24
 8003110:	189b      	adds	r3, r3, r2
 8003112:	19db      	adds	r3, r3, r7
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	431a      	orrs	r2, r3
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	431a      	orrs	r2, r3
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	4313      	orrs	r3, r2
 800312e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4ac3      	ldr	r2, [pc, #780]	; (8003444 <UART_SetConfig+0x340>)
 8003138:	4013      	ands	r3, r2
 800313a:	0019      	movs	r1, r3
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003142:	430a      	orrs	r2, r1
 8003144:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4abe      	ldr	r2, [pc, #760]	; (8003448 <UART_SetConfig+0x344>)
 800314e:	4013      	ands	r3, r2
 8003150:	0019      	movs	r1, r3
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4ab8      	ldr	r2, [pc, #736]	; (800344c <UART_SetConfig+0x348>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d004      	beq.n	8003178 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003174:	4313      	orrs	r3, r2
 8003176:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	4ab4      	ldr	r2, [pc, #720]	; (8003450 <UART_SetConfig+0x34c>)
 8003180:	4013      	ands	r3, r2
 8003182:	0019      	movs	r1, r3
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800318a:	430a      	orrs	r2, r1
 800318c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4ab0      	ldr	r2, [pc, #704]	; (8003454 <UART_SetConfig+0x350>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d131      	bne.n	80031fc <UART_SetConfig+0xf8>
 8003198:	4baf      	ldr	r3, [pc, #700]	; (8003458 <UART_SetConfig+0x354>)
 800319a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319c:	2203      	movs	r2, #3
 800319e:	4013      	ands	r3, r2
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d01d      	beq.n	80031e0 <UART_SetConfig+0xdc>
 80031a4:	d823      	bhi.n	80031ee <UART_SetConfig+0xea>
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d00c      	beq.n	80031c4 <UART_SetConfig+0xc0>
 80031aa:	d820      	bhi.n	80031ee <UART_SetConfig+0xea>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <UART_SetConfig+0xb2>
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d00e      	beq.n	80031d2 <UART_SetConfig+0xce>
 80031b4:	e01b      	b.n	80031ee <UART_SetConfig+0xea>
 80031b6:	231b      	movs	r3, #27
 80031b8:	2218      	movs	r2, #24
 80031ba:	189b      	adds	r3, r3, r2
 80031bc:	19db      	adds	r3, r3, r7
 80031be:	2201      	movs	r2, #1
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	e0b4      	b.n	800332e <UART_SetConfig+0x22a>
 80031c4:	231b      	movs	r3, #27
 80031c6:	2218      	movs	r2, #24
 80031c8:	189b      	adds	r3, r3, r2
 80031ca:	19db      	adds	r3, r3, r7
 80031cc:	2202      	movs	r2, #2
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e0ad      	b.n	800332e <UART_SetConfig+0x22a>
 80031d2:	231b      	movs	r3, #27
 80031d4:	2218      	movs	r2, #24
 80031d6:	189b      	adds	r3, r3, r2
 80031d8:	19db      	adds	r3, r3, r7
 80031da:	2204      	movs	r2, #4
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e0a6      	b.n	800332e <UART_SetConfig+0x22a>
 80031e0:	231b      	movs	r3, #27
 80031e2:	2218      	movs	r2, #24
 80031e4:	189b      	adds	r3, r3, r2
 80031e6:	19db      	adds	r3, r3, r7
 80031e8:	2208      	movs	r2, #8
 80031ea:	701a      	strb	r2, [r3, #0]
 80031ec:	e09f      	b.n	800332e <UART_SetConfig+0x22a>
 80031ee:	231b      	movs	r3, #27
 80031f0:	2218      	movs	r2, #24
 80031f2:	189b      	adds	r3, r3, r2
 80031f4:	19db      	adds	r3, r3, r7
 80031f6:	2210      	movs	r2, #16
 80031f8:	701a      	strb	r2, [r3, #0]
 80031fa:	e098      	b.n	800332e <UART_SetConfig+0x22a>
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a96      	ldr	r2, [pc, #600]	; (800345c <UART_SetConfig+0x358>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d131      	bne.n	800326a <UART_SetConfig+0x166>
 8003206:	4b94      	ldr	r3, [pc, #592]	; (8003458 <UART_SetConfig+0x354>)
 8003208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320a:	220c      	movs	r2, #12
 800320c:	4013      	ands	r3, r2
 800320e:	2b0c      	cmp	r3, #12
 8003210:	d01d      	beq.n	800324e <UART_SetConfig+0x14a>
 8003212:	d823      	bhi.n	800325c <UART_SetConfig+0x158>
 8003214:	2b08      	cmp	r3, #8
 8003216:	d00c      	beq.n	8003232 <UART_SetConfig+0x12e>
 8003218:	d820      	bhi.n	800325c <UART_SetConfig+0x158>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <UART_SetConfig+0x120>
 800321e:	2b04      	cmp	r3, #4
 8003220:	d00e      	beq.n	8003240 <UART_SetConfig+0x13c>
 8003222:	e01b      	b.n	800325c <UART_SetConfig+0x158>
 8003224:	231b      	movs	r3, #27
 8003226:	2218      	movs	r2, #24
 8003228:	189b      	adds	r3, r3, r2
 800322a:	19db      	adds	r3, r3, r7
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
 8003230:	e07d      	b.n	800332e <UART_SetConfig+0x22a>
 8003232:	231b      	movs	r3, #27
 8003234:	2218      	movs	r2, #24
 8003236:	189b      	adds	r3, r3, r2
 8003238:	19db      	adds	r3, r3, r7
 800323a:	2202      	movs	r2, #2
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e076      	b.n	800332e <UART_SetConfig+0x22a>
 8003240:	231b      	movs	r3, #27
 8003242:	2218      	movs	r2, #24
 8003244:	189b      	adds	r3, r3, r2
 8003246:	19db      	adds	r3, r3, r7
 8003248:	2204      	movs	r2, #4
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e06f      	b.n	800332e <UART_SetConfig+0x22a>
 800324e:	231b      	movs	r3, #27
 8003250:	2218      	movs	r2, #24
 8003252:	189b      	adds	r3, r3, r2
 8003254:	19db      	adds	r3, r3, r7
 8003256:	2208      	movs	r2, #8
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	e068      	b.n	800332e <UART_SetConfig+0x22a>
 800325c:	231b      	movs	r3, #27
 800325e:	2218      	movs	r2, #24
 8003260:	189b      	adds	r3, r3, r2
 8003262:	19db      	adds	r3, r3, r7
 8003264:	2210      	movs	r2, #16
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	e061      	b.n	800332e <UART_SetConfig+0x22a>
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a7c      	ldr	r2, [pc, #496]	; (8003460 <UART_SetConfig+0x35c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d106      	bne.n	8003282 <UART_SetConfig+0x17e>
 8003274:	231b      	movs	r3, #27
 8003276:	2218      	movs	r2, #24
 8003278:	189b      	adds	r3, r3, r2
 800327a:	19db      	adds	r3, r3, r7
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]
 8003280:	e055      	b.n	800332e <UART_SetConfig+0x22a>
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a77      	ldr	r2, [pc, #476]	; (8003464 <UART_SetConfig+0x360>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d106      	bne.n	800329a <UART_SetConfig+0x196>
 800328c:	231b      	movs	r3, #27
 800328e:	2218      	movs	r2, #24
 8003290:	189b      	adds	r3, r3, r2
 8003292:	19db      	adds	r3, r3, r7
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]
 8003298:	e049      	b.n	800332e <UART_SetConfig+0x22a>
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a6b      	ldr	r2, [pc, #428]	; (800344c <UART_SetConfig+0x348>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d13e      	bne.n	8003322 <UART_SetConfig+0x21e>
 80032a4:	4b6c      	ldr	r3, [pc, #432]	; (8003458 <UART_SetConfig+0x354>)
 80032a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032a8:	23c0      	movs	r3, #192	; 0xc0
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	4013      	ands	r3, r2
 80032ae:	22c0      	movs	r2, #192	; 0xc0
 80032b0:	0112      	lsls	r2, r2, #4
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d027      	beq.n	8003306 <UART_SetConfig+0x202>
 80032b6:	22c0      	movs	r2, #192	; 0xc0
 80032b8:	0112      	lsls	r2, r2, #4
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d82a      	bhi.n	8003314 <UART_SetConfig+0x210>
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	0112      	lsls	r2, r2, #4
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d011      	beq.n	80032ea <UART_SetConfig+0x1e6>
 80032c6:	2280      	movs	r2, #128	; 0x80
 80032c8:	0112      	lsls	r2, r2, #4
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d822      	bhi.n	8003314 <UART_SetConfig+0x210>
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d004      	beq.n	80032dc <UART_SetConfig+0x1d8>
 80032d2:	2280      	movs	r2, #128	; 0x80
 80032d4:	00d2      	lsls	r2, r2, #3
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00e      	beq.n	80032f8 <UART_SetConfig+0x1f4>
 80032da:	e01b      	b.n	8003314 <UART_SetConfig+0x210>
 80032dc:	231b      	movs	r3, #27
 80032de:	2218      	movs	r2, #24
 80032e0:	189b      	adds	r3, r3, r2
 80032e2:	19db      	adds	r3, r3, r7
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	e021      	b.n	800332e <UART_SetConfig+0x22a>
 80032ea:	231b      	movs	r3, #27
 80032ec:	2218      	movs	r2, #24
 80032ee:	189b      	adds	r3, r3, r2
 80032f0:	19db      	adds	r3, r3, r7
 80032f2:	2202      	movs	r2, #2
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	e01a      	b.n	800332e <UART_SetConfig+0x22a>
 80032f8:	231b      	movs	r3, #27
 80032fa:	2218      	movs	r2, #24
 80032fc:	189b      	adds	r3, r3, r2
 80032fe:	19db      	adds	r3, r3, r7
 8003300:	2204      	movs	r2, #4
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	e013      	b.n	800332e <UART_SetConfig+0x22a>
 8003306:	231b      	movs	r3, #27
 8003308:	2218      	movs	r2, #24
 800330a:	189b      	adds	r3, r3, r2
 800330c:	19db      	adds	r3, r3, r7
 800330e:	2208      	movs	r2, #8
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e00c      	b.n	800332e <UART_SetConfig+0x22a>
 8003314:	231b      	movs	r3, #27
 8003316:	2218      	movs	r2, #24
 8003318:	189b      	adds	r3, r3, r2
 800331a:	19db      	adds	r3, r3, r7
 800331c:	2210      	movs	r2, #16
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e005      	b.n	800332e <UART_SetConfig+0x22a>
 8003322:	231b      	movs	r3, #27
 8003324:	2218      	movs	r2, #24
 8003326:	189b      	adds	r3, r3, r2
 8003328:	19db      	adds	r3, r3, r7
 800332a:	2210      	movs	r2, #16
 800332c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a46      	ldr	r2, [pc, #280]	; (800344c <UART_SetConfig+0x348>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d000      	beq.n	800333a <UART_SetConfig+0x236>
 8003338:	e09a      	b.n	8003470 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800333a:	231b      	movs	r3, #27
 800333c:	2218      	movs	r2, #24
 800333e:	189b      	adds	r3, r3, r2
 8003340:	19db      	adds	r3, r3, r7
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b08      	cmp	r3, #8
 8003346:	d01d      	beq.n	8003384 <UART_SetConfig+0x280>
 8003348:	dc20      	bgt.n	800338c <UART_SetConfig+0x288>
 800334a:	2b04      	cmp	r3, #4
 800334c:	d015      	beq.n	800337a <UART_SetConfig+0x276>
 800334e:	dc1d      	bgt.n	800338c <UART_SetConfig+0x288>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <UART_SetConfig+0x256>
 8003354:	2b02      	cmp	r3, #2
 8003356:	d005      	beq.n	8003364 <UART_SetConfig+0x260>
 8003358:	e018      	b.n	800338c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800335a:	f7ff faa3 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
 800335e:	0003      	movs	r3, r0
 8003360:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003362:	e01c      	b.n	800339e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003364:	4b3c      	ldr	r3, [pc, #240]	; (8003458 <UART_SetConfig+0x354>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2210      	movs	r2, #16
 800336a:	4013      	ands	r3, r2
 800336c:	d002      	beq.n	8003374 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800336e:	4b3e      	ldr	r3, [pc, #248]	; (8003468 <UART_SetConfig+0x364>)
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003372:	e014      	b.n	800339e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003374:	4b3d      	ldr	r3, [pc, #244]	; (800346c <UART_SetConfig+0x368>)
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003378:	e011      	b.n	800339e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337a:	f7ff f9e3 	bl	8002744 <HAL_RCC_GetSysClockFreq>
 800337e:	0003      	movs	r3, r0
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003382:	e00c      	b.n	800339e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800338a:	e008      	b.n	800339e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003390:	231a      	movs	r3, #26
 8003392:	2218      	movs	r2, #24
 8003394:	189b      	adds	r3, r3, r2
 8003396:	19db      	adds	r3, r3, r7
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
        break;
 800339c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d100      	bne.n	80033a6 <UART_SetConfig+0x2a2>
 80033a4:	e134      	b.n	8003610 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	0013      	movs	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	189b      	adds	r3, r3, r2
 80033b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d305      	bcc.n	80033c2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033be:	429a      	cmp	r2, r3
 80033c0:	d906      	bls.n	80033d0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80033c2:	231a      	movs	r3, #26
 80033c4:	2218      	movs	r2, #24
 80033c6:	189b      	adds	r3, r3, r2
 80033c8:	19db      	adds	r3, r3, r7
 80033ca:	2201      	movs	r2, #1
 80033cc:	701a      	strb	r2, [r3, #0]
 80033ce:	e11f      	b.n	8003610 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	6939      	ldr	r1, [r7, #16]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	000b      	movs	r3, r1
 80033de:	0e1b      	lsrs	r3, r3, #24
 80033e0:	0010      	movs	r0, r2
 80033e2:	0205      	lsls	r5, r0, #8
 80033e4:	431d      	orrs	r5, r3
 80033e6:	000b      	movs	r3, r1
 80033e8:	021c      	lsls	r4, r3, #8
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	085b      	lsrs	r3, r3, #1
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	68b8      	ldr	r0, [r7, #8]
 80033f8:	68f9      	ldr	r1, [r7, #12]
 80033fa:	1900      	adds	r0, r0, r4
 80033fc:	4169      	adcs	r1, r5
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	2300      	movs	r3, #0
 8003406:	607b      	str	r3, [r7, #4]
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f7fc ff08 	bl	8000220 <__aeabi_uldivmod>
 8003410:	0002      	movs	r2, r0
 8003412:	000b      	movs	r3, r1
 8003414:	0013      	movs	r3, r2
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800341a:	23c0      	movs	r3, #192	; 0xc0
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	429a      	cmp	r2, r3
 8003420:	d309      	bcc.n	8003436 <UART_SetConfig+0x332>
 8003422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003424:	2380      	movs	r3, #128	; 0x80
 8003426:	035b      	lsls	r3, r3, #13
 8003428:	429a      	cmp	r2, r3
 800342a:	d204      	bcs.n	8003436 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003432:	60da      	str	r2, [r3, #12]
 8003434:	e0ec      	b.n	8003610 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8003436:	231a      	movs	r3, #26
 8003438:	2218      	movs	r2, #24
 800343a:	189b      	adds	r3, r3, r2
 800343c:	19db      	adds	r3, r3, r7
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]
 8003442:	e0e5      	b.n	8003610 <UART_SetConfig+0x50c>
 8003444:	efff69f3 	.word	0xefff69f3
 8003448:	ffffcfff 	.word	0xffffcfff
 800344c:	40004800 	.word	0x40004800
 8003450:	fffff4ff 	.word	0xfffff4ff
 8003454:	40013800 	.word	0x40013800
 8003458:	40021000 	.word	0x40021000
 800345c:	40004400 	.word	0x40004400
 8003460:	40004c00 	.word	0x40004c00
 8003464:	40005000 	.word	0x40005000
 8003468:	003d0900 	.word	0x003d0900
 800346c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	429a      	cmp	r2, r3
 800347a:	d000      	beq.n	800347e <UART_SetConfig+0x37a>
 800347c:	e071      	b.n	8003562 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800347e:	231b      	movs	r3, #27
 8003480:	2218      	movs	r2, #24
 8003482:	189b      	adds	r3, r3, r2
 8003484:	19db      	adds	r3, r3, r7
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d822      	bhi.n	80034d2 <UART_SetConfig+0x3ce>
 800348c:	009a      	lsls	r2, r3, #2
 800348e:	4b68      	ldr	r3, [pc, #416]	; (8003630 <UART_SetConfig+0x52c>)
 8003490:	18d3      	adds	r3, r2, r3
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003496:	f7ff fa05 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
 800349a:	0003      	movs	r3, r0
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800349e:	e021      	b.n	80034e4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034a0:	f7ff fa16 	bl	80028d0 <HAL_RCC_GetPCLK2Freq>
 80034a4:	0003      	movs	r3, r0
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034a8:	e01c      	b.n	80034e4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034aa:	4b62      	ldr	r3, [pc, #392]	; (8003634 <UART_SetConfig+0x530>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2210      	movs	r2, #16
 80034b0:	4013      	ands	r3, r2
 80034b2:	d002      	beq.n	80034ba <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80034b4:	4b60      	ldr	r3, [pc, #384]	; (8003638 <UART_SetConfig+0x534>)
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80034b8:	e014      	b.n	80034e4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80034ba:	4b60      	ldr	r3, [pc, #384]	; (800363c <UART_SetConfig+0x538>)
 80034bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034be:	e011      	b.n	80034e4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034c0:	f7ff f940 	bl	8002744 <HAL_RCC_GetSysClockFreq>
 80034c4:	0003      	movs	r3, r0
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034c8:	e00c      	b.n	80034e4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	021b      	lsls	r3, r3, #8
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034d0:	e008      	b.n	80034e4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80034d6:	231a      	movs	r3, #26
 80034d8:	2218      	movs	r2, #24
 80034da:	189b      	adds	r3, r3, r2
 80034dc:	19db      	adds	r3, r3, r7
 80034de:	2201      	movs	r2, #1
 80034e0:	701a      	strb	r2, [r3, #0]
        break;
 80034e2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d100      	bne.n	80034ec <UART_SetConfig+0x3e8>
 80034ea:	e091      	b.n	8003610 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ee:	005a      	lsls	r2, r3, #1
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	085b      	lsrs	r3, r3, #1
 80034f6:	18d2      	adds	r2, r2, r3
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	0019      	movs	r1, r3
 80034fe:	0010      	movs	r0, r2
 8003500:	f7fc fe02 	bl	8000108 <__udivsi3>
 8003504:	0003      	movs	r3, r0
 8003506:	b29b      	uxth	r3, r3
 8003508:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	2b0f      	cmp	r3, #15
 800350e:	d921      	bls.n	8003554 <UART_SetConfig+0x450>
 8003510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	025b      	lsls	r3, r3, #9
 8003516:	429a      	cmp	r2, r3
 8003518:	d21c      	bcs.n	8003554 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351c:	b29a      	uxth	r2, r3
 800351e:	200e      	movs	r0, #14
 8003520:	2418      	movs	r4, #24
 8003522:	1903      	adds	r3, r0, r4
 8003524:	19db      	adds	r3, r3, r7
 8003526:	210f      	movs	r1, #15
 8003528:	438a      	bics	r2, r1
 800352a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	085b      	lsrs	r3, r3, #1
 8003530:	b29b      	uxth	r3, r3
 8003532:	2207      	movs	r2, #7
 8003534:	4013      	ands	r3, r2
 8003536:	b299      	uxth	r1, r3
 8003538:	1903      	adds	r3, r0, r4
 800353a:	19db      	adds	r3, r3, r7
 800353c:	1902      	adds	r2, r0, r4
 800353e:	19d2      	adds	r2, r2, r7
 8003540:	8812      	ldrh	r2, [r2, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	1902      	adds	r2, r0, r4
 800354c:	19d2      	adds	r2, r2, r7
 800354e:	8812      	ldrh	r2, [r2, #0]
 8003550:	60da      	str	r2, [r3, #12]
 8003552:	e05d      	b.n	8003610 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003554:	231a      	movs	r3, #26
 8003556:	2218      	movs	r2, #24
 8003558:	189b      	adds	r3, r3, r2
 800355a:	19db      	adds	r3, r3, r7
 800355c:	2201      	movs	r2, #1
 800355e:	701a      	strb	r2, [r3, #0]
 8003560:	e056      	b.n	8003610 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003562:	231b      	movs	r3, #27
 8003564:	2218      	movs	r2, #24
 8003566:	189b      	adds	r3, r3, r2
 8003568:	19db      	adds	r3, r3, r7
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b08      	cmp	r3, #8
 800356e:	d822      	bhi.n	80035b6 <UART_SetConfig+0x4b2>
 8003570:	009a      	lsls	r2, r3, #2
 8003572:	4b33      	ldr	r3, [pc, #204]	; (8003640 <UART_SetConfig+0x53c>)
 8003574:	18d3      	adds	r3, r2, r3
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800357a:	f7ff f993 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
 800357e:	0003      	movs	r3, r0
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003582:	e021      	b.n	80035c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003584:	f7ff f9a4 	bl	80028d0 <HAL_RCC_GetPCLK2Freq>
 8003588:	0003      	movs	r3, r0
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800358c:	e01c      	b.n	80035c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800358e:	4b29      	ldr	r3, [pc, #164]	; (8003634 <UART_SetConfig+0x530>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2210      	movs	r2, #16
 8003594:	4013      	ands	r3, r2
 8003596:	d002      	beq.n	800359e <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003598:	4b27      	ldr	r3, [pc, #156]	; (8003638 <UART_SetConfig+0x534>)
 800359a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800359c:	e014      	b.n	80035c8 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 800359e:	4b27      	ldr	r3, [pc, #156]	; (800363c <UART_SetConfig+0x538>)
 80035a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035a2:	e011      	b.n	80035c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035a4:	f7ff f8ce 	bl	8002744 <HAL_RCC_GetSysClockFreq>
 80035a8:	0003      	movs	r3, r0
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035ac:	e00c      	b.n	80035c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	021b      	lsls	r3, r3, #8
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035b4:	e008      	b.n	80035c8 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80035ba:	231a      	movs	r3, #26
 80035bc:	2218      	movs	r2, #24
 80035be:	189b      	adds	r3, r3, r2
 80035c0:	19db      	adds	r3, r3, r7
 80035c2:	2201      	movs	r2, #1
 80035c4:	701a      	strb	r2, [r3, #0]
        break;
 80035c6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d020      	beq.n	8003610 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	085a      	lsrs	r2, r3, #1
 80035d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d6:	18d2      	adds	r2, r2, r3
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	0019      	movs	r1, r3
 80035de:	0010      	movs	r0, r2
 80035e0:	f7fc fd92 	bl	8000108 <__udivsi3>
 80035e4:	0003      	movs	r3, r0
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	2b0f      	cmp	r3, #15
 80035ee:	d909      	bls.n	8003604 <UART_SetConfig+0x500>
 80035f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035f2:	2380      	movs	r3, #128	; 0x80
 80035f4:	025b      	lsls	r3, r3, #9
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d204      	bcs.n	8003604 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	e005      	b.n	8003610 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003604:	231a      	movs	r3, #26
 8003606:	2218      	movs	r2, #24
 8003608:	189b      	adds	r3, r3, r2
 800360a:	19db      	adds	r3, r3, r7
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2200      	movs	r2, #0
 8003614:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	2200      	movs	r2, #0
 800361a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800361c:	231a      	movs	r3, #26
 800361e:	2218      	movs	r2, #24
 8003620:	189b      	adds	r3, r3, r2
 8003622:	19db      	adds	r3, r3, r7
 8003624:	781b      	ldrb	r3, [r3, #0]
}
 8003626:	0018      	movs	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	b00e      	add	sp, #56	; 0x38
 800362c:	bdb0      	pop	{r4, r5, r7, pc}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	08003b38 	.word	0x08003b38
 8003634:	40021000 	.word	0x40021000
 8003638:	003d0900 	.word	0x003d0900
 800363c:	00f42400 	.word	0x00f42400
 8003640:	08003b5c 	.word	0x08003b5c

08003644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	2201      	movs	r2, #1
 8003652:	4013      	ands	r3, r2
 8003654:	d00b      	beq.n	800366e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4a4a      	ldr	r2, [pc, #296]	; (8003788 <UART_AdvFeatureConfig+0x144>)
 800365e:	4013      	ands	r3, r2
 8003660:	0019      	movs	r1, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	2202      	movs	r2, #2
 8003674:	4013      	ands	r3, r2
 8003676:	d00b      	beq.n	8003690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4a43      	ldr	r2, [pc, #268]	; (800378c <UART_AdvFeatureConfig+0x148>)
 8003680:	4013      	ands	r3, r2
 8003682:	0019      	movs	r1, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	2204      	movs	r2, #4
 8003696:	4013      	ands	r3, r2
 8003698:	d00b      	beq.n	80036b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4a3b      	ldr	r2, [pc, #236]	; (8003790 <UART_AdvFeatureConfig+0x14c>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	0019      	movs	r1, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	2208      	movs	r2, #8
 80036b8:	4013      	ands	r3, r2
 80036ba:	d00b      	beq.n	80036d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4a34      	ldr	r2, [pc, #208]	; (8003794 <UART_AdvFeatureConfig+0x150>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	0019      	movs	r1, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	2210      	movs	r2, #16
 80036da:	4013      	ands	r3, r2
 80036dc:	d00b      	beq.n	80036f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4a2c      	ldr	r2, [pc, #176]	; (8003798 <UART_AdvFeatureConfig+0x154>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	0019      	movs	r1, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	2220      	movs	r2, #32
 80036fc:	4013      	ands	r3, r2
 80036fe:	d00b      	beq.n	8003718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	4a25      	ldr	r2, [pc, #148]	; (800379c <UART_AdvFeatureConfig+0x158>)
 8003708:	4013      	ands	r3, r2
 800370a:	0019      	movs	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	2240      	movs	r2, #64	; 0x40
 800371e:	4013      	ands	r3, r2
 8003720:	d01d      	beq.n	800375e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <UART_AdvFeatureConfig+0x15c>)
 800372a:	4013      	ands	r3, r2
 800372c:	0019      	movs	r1, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	035b      	lsls	r3, r3, #13
 8003742:	429a      	cmp	r2, r3
 8003744:	d10b      	bne.n	800375e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4a15      	ldr	r2, [pc, #84]	; (80037a4 <UART_AdvFeatureConfig+0x160>)
 800374e:	4013      	ands	r3, r2
 8003750:	0019      	movs	r1, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	2280      	movs	r2, #128	; 0x80
 8003764:	4013      	ands	r3, r2
 8003766:	d00b      	beq.n	8003780 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <UART_AdvFeatureConfig+0x164>)
 8003770:	4013      	ands	r3, r2
 8003772:	0019      	movs	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	605a      	str	r2, [r3, #4]
  }
}
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}
 8003788:	fffdffff 	.word	0xfffdffff
 800378c:	fffeffff 	.word	0xfffeffff
 8003790:	fffbffff 	.word	0xfffbffff
 8003794:	ffff7fff 	.word	0xffff7fff
 8003798:	ffffefff 	.word	0xffffefff
 800379c:	ffffdfff 	.word	0xffffdfff
 80037a0:	ffefffff 	.word	0xffefffff
 80037a4:	ff9fffff 	.word	0xff9fffff
 80037a8:	fff7ffff 	.word	0xfff7ffff

080037ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2280      	movs	r2, #128	; 0x80
 80037b8:	2100      	movs	r1, #0
 80037ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037bc:	f7fd ff36 	bl	800162c <HAL_GetTick>
 80037c0:	0003      	movs	r3, r0
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2208      	movs	r2, #8
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d10c      	bne.n	80037ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2280      	movs	r2, #128	; 0x80
 80037d6:	0391      	lsls	r1, r2, #14
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	4a17      	ldr	r2, [pc, #92]	; (8003838 <UART_CheckIdleState+0x8c>)
 80037dc:	9200      	str	r2, [sp, #0]
 80037de:	2200      	movs	r2, #0
 80037e0:	f000 f82c 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 80037e4:	1e03      	subs	r3, r0, #0
 80037e6:	d001      	beq.n	80037ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e021      	b.n	8003830 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2204      	movs	r2, #4
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d10c      	bne.n	8003814 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2280      	movs	r2, #128	; 0x80
 80037fe:	03d1      	lsls	r1, r2, #15
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	4a0d      	ldr	r2, [pc, #52]	; (8003838 <UART_CheckIdleState+0x8c>)
 8003804:	9200      	str	r2, [sp, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	f000 f818 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 800380c:	1e03      	subs	r3, r0, #0
 800380e:	d001      	beq.n	8003814 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e00d      	b.n	8003830 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2274      	movs	r2, #116	; 0x74
 800382a:	2100      	movs	r1, #0
 800382c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	0018      	movs	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	b004      	add	sp, #16
 8003836:	bd80      	pop	{r7, pc}
 8003838:	01ffffff 	.word	0x01ffffff

0800383c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b094      	sub	sp, #80	; 0x50
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	1dfb      	adds	r3, r7, #7
 800384a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800384c:	e0a3      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003850:	3301      	adds	r3, #1
 8003852:	d100      	bne.n	8003856 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003854:	e09f      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003856:	f7fd fee9 	bl	800162c <HAL_GetTick>
 800385a:	0002      	movs	r2, r0
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003862:	429a      	cmp	r2, r3
 8003864:	d302      	bcc.n	800386c <UART_WaitOnFlagUntilTimeout+0x30>
 8003866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003868:	2b00      	cmp	r3, #0
 800386a:	d13d      	bne.n	80038e8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386c:	f3ef 8310 	mrs	r3, PRIMASK
 8003870:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003874:	647b      	str	r3, [r7, #68]	; 0x44
 8003876:	2301      	movs	r3, #1
 8003878:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	f383 8810 	msr	PRIMASK, r3
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	494c      	ldr	r1, [pc, #304]	; (80039c0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800388e:	400a      	ands	r2, r1
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003894:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	f383 8810 	msr	PRIMASK, r3
}
 800389c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389e:	f3ef 8310 	mrs	r3, PRIMASK
 80038a2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80038a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a6:	643b      	str	r3, [r7, #64]	; 0x40
 80038a8:	2301      	movs	r3, #1
 80038aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ae:	f383 8810 	msr	PRIMASK, r3
}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2101      	movs	r1, #1
 80038c0:	438a      	bics	r2, r1
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ca:	f383 8810 	msr	PRIMASK, r3
}
 80038ce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2274      	movs	r2, #116	; 0x74
 80038e0:	2100      	movs	r1, #0
 80038e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e067      	b.n	80039b8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2204      	movs	r2, #4
 80038f0:	4013      	ands	r3, r2
 80038f2:	d050      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69da      	ldr	r2, [r3, #28]
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	401a      	ands	r2, r3
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	429a      	cmp	r2, r3
 8003906:	d146      	bne.n	8003996 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	0112      	lsls	r2, r2, #4
 8003910:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003912:	f3ef 8310 	mrs	r3, PRIMASK
 8003916:	613b      	str	r3, [r7, #16]
  return(result);
 8003918:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800391a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800391c:	2301      	movs	r3, #1
 800391e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f383 8810 	msr	PRIMASK, r3
}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4923      	ldr	r1, [pc, #140]	; (80039c0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003934:	400a      	ands	r2, r1
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f383 8810 	msr	PRIMASK, r3
}
 8003942:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003944:	f3ef 8310 	mrs	r3, PRIMASK
 8003948:	61fb      	str	r3, [r7, #28]
  return(result);
 800394a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394c:	64bb      	str	r3, [r7, #72]	; 0x48
 800394e:	2301      	movs	r3, #1
 8003950:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f383 8810 	msr	PRIMASK, r3
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2101      	movs	r1, #1
 8003966:	438a      	bics	r2, r1
 8003968:	609a      	str	r2, [r3, #8]
 800396a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	f383 8810 	msr	PRIMASK, r3
}
 8003974:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2280      	movs	r2, #128	; 0x80
 8003986:	2120      	movs	r1, #32
 8003988:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2274      	movs	r2, #116	; 0x74
 800398e:	2100      	movs	r1, #0
 8003990:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e010      	b.n	80039b8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	4013      	ands	r3, r2
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	425a      	negs	r2, r3
 80039a6:	4153      	adcs	r3, r2
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	001a      	movs	r2, r3
 80039ac:	1dfb      	adds	r3, r7, #7
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d100      	bne.n	80039b6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80039b4:	e74b      	b.n	800384e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	0018      	movs	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b014      	add	sp, #80	; 0x50
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	fffffe5f 	.word	0xfffffe5f

080039c4 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e05b      	b.n	8003a94 <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d107      	bne.n	80039f4 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2274      	movs	r2, #116	; 0x74
 80039e8:	2100      	movs	r1, #0
 80039ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7fd f8fe 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2224      	movs	r2, #36	; 0x24
 80039f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2101      	movs	r1, #1
 8003a06:	438a      	bics	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f7ff fb79 	bl	8003104 <UART_SetConfig>
 8003a12:	0003      	movs	r3, r0
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e03b      	b.n	8003a94 <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	0018      	movs	r0, r3
 8003a28:	f7ff fe0c 	bl	8003644 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2180      	movs	r1, #128	; 0x80
 8003a38:	01c9      	lsls	r1, r1, #7
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a15      	ldr	r2, [pc, #84]	; (8003a9c <HAL_RS485Ex_Init+0xd8>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	0019      	movs	r1, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	055b      	lsls	r3, r3, #21
 8003a58:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	041b      	lsls	r3, r3, #16
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a0d      	ldr	r2, [pc, #52]	; (8003aa0 <HAL_RS485Ex_Init+0xdc>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	0019      	movs	r1, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2101      	movs	r1, #1
 8003a86:	430a      	orrs	r2, r1
 8003a88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f7ff fe8d 	bl	80037ac <UART_CheckIdleState>
 8003a92:	0003      	movs	r3, r0
}
 8003a94:	0018      	movs	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b006      	add	sp, #24
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	ffff7fff 	.word	0xffff7fff
 8003aa0:	fc00ffff 	.word	0xfc00ffff

08003aa4 <__libc_init_array>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	2600      	movs	r6, #0
 8003aa8:	4d0c      	ldr	r5, [pc, #48]	; (8003adc <__libc_init_array+0x38>)
 8003aaa:	4c0d      	ldr	r4, [pc, #52]	; (8003ae0 <__libc_init_array+0x3c>)
 8003aac:	1b64      	subs	r4, r4, r5
 8003aae:	10a4      	asrs	r4, r4, #2
 8003ab0:	42a6      	cmp	r6, r4
 8003ab2:	d109      	bne.n	8003ac8 <__libc_init_array+0x24>
 8003ab4:	2600      	movs	r6, #0
 8003ab6:	f000 f821 	bl	8003afc <_init>
 8003aba:	4d0a      	ldr	r5, [pc, #40]	; (8003ae4 <__libc_init_array+0x40>)
 8003abc:	4c0a      	ldr	r4, [pc, #40]	; (8003ae8 <__libc_init_array+0x44>)
 8003abe:	1b64      	subs	r4, r4, r5
 8003ac0:	10a4      	asrs	r4, r4, #2
 8003ac2:	42a6      	cmp	r6, r4
 8003ac4:	d105      	bne.n	8003ad2 <__libc_init_array+0x2e>
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
 8003ac8:	00b3      	lsls	r3, r6, #2
 8003aca:	58eb      	ldr	r3, [r5, r3]
 8003acc:	4798      	blx	r3
 8003ace:	3601      	adds	r6, #1
 8003ad0:	e7ee      	b.n	8003ab0 <__libc_init_array+0xc>
 8003ad2:	00b3      	lsls	r3, r6, #2
 8003ad4:	58eb      	ldr	r3, [r5, r3]
 8003ad6:	4798      	blx	r3
 8003ad8:	3601      	adds	r6, #1
 8003ada:	e7f2      	b.n	8003ac2 <__libc_init_array+0x1e>
 8003adc:	08003b88 	.word	0x08003b88
 8003ae0:	08003b88 	.word	0x08003b88
 8003ae4:	08003b88 	.word	0x08003b88
 8003ae8:	08003b8c 	.word	0x08003b8c

08003aec <memset>:
 8003aec:	0003      	movs	r3, r0
 8003aee:	1882      	adds	r2, r0, r2
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d100      	bne.n	8003af6 <memset+0xa>
 8003af4:	4770      	bx	lr
 8003af6:	7019      	strb	r1, [r3, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	e7f9      	b.n	8003af0 <memset+0x4>

08003afc <_init>:
 8003afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b02:	bc08      	pop	{r3}
 8003b04:	469e      	mov	lr, r3
 8003b06:	4770      	bx	lr

08003b08 <_fini>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr
